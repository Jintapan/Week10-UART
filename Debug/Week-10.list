
Week-10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034fc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a4  0800369c  0800369c  0001369c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003840  08003840  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08003840  08003840  00013840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003848  08003848  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003848  08003848  00013848  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800384c  0800384c  0001384c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08003850  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  20000078  080038c8  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000144  080038c8  00020144  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007fea  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000176e  00000000  00000000  00028092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006a0  00000000  00000000  00029800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005e8  00000000  00000000  00029ea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000158bb  00000000  00000000  0002a488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007a1c  00000000  00000000  0003fd43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085899  00000000  00000000  0004775f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ccff8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001da4  00000000  00000000  000cd04c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003684 	.word	0x08003684

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	08003684 	.word	0x08003684

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000588:	b5b0      	push	{r4, r5, r7, lr}
 800058a:	b088      	sub	sp, #32
 800058c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058e:	f000 fcd5 	bl	8000f3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000592:	f000 fa77 	bl	8000a84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000596:	f000 fb09 	bl	8000bac <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800059a:	f000 fadd 	bl	8000b58 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  {
	  char temp[] = "\n\n\r** Welcome to Program **\n";
 800059e:	4baf      	ldr	r3, [pc, #700]	; (800085c <main+0x2d4>)
 80005a0:	463c      	mov	r4, r7
 80005a2:	461d      	mov	r5, r3
 80005a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005a8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80005ac:	c407      	stmia	r4!, {r0, r1, r2}
 80005ae:	7023      	strb	r3, [r4, #0]
	  HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),100);
 80005b0:	463b      	mov	r3, r7
 80005b2:	4618      	mov	r0, r3
 80005b4:	f7ff fe14 	bl	80001e0 <strlen>
 80005b8:	4603      	mov	r3, r0
 80005ba:	b29a      	uxth	r2, r3
 80005bc:	4639      	mov	r1, r7
 80005be:	2364      	movs	r3, #100	; 0x64
 80005c0:	48a7      	ldr	r0, [pc, #668]	; (8000860 <main+0x2d8>)
 80005c2:	f001 fcea 	bl	8001f9a <HAL_UART_Transmit>
		/*Method 1 Polling Mode*/

//		UARTRecieveAndResponsePolling();

		/*Method 2 Interrupt Mode*/
		HAL_UART_Receive_IT(&huart2,  (uint8_t*)RxDataBuffer, 32);
 80005c6:	2220      	movs	r2, #32
 80005c8:	49a6      	ldr	r1, [pc, #664]	; (8000864 <main+0x2dc>)
 80005ca:	48a5      	ldr	r0, [pc, #660]	; (8000860 <main+0x2d8>)
 80005cc:	f001 fd7e 	bl	80020cc <HAL_UART_Receive_IT>

		/*Method 2 W/ 1 Char Received*/
		int16_t inputchar = UARTRecieveIT();
 80005d0:	f000 fb5c 	bl	8000c8c <UARTRecieveIT>
 80005d4:	4603      	mov	r3, r0
 80005d6:	83fb      	strh	r3, [r7, #30]
//
////			sprintf(TxDataBuffer, "ReceivedChar:[%c]\r\n", inputchar);
//			HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 100);
//		}

		if(LED_Status == 1)
 80005d8:	4ba3      	ldr	r3, [pc, #652]	; (8000868 <main+0x2e0>)
 80005da:	881b      	ldrh	r3, [r3, #0]
 80005dc:	2b01      	cmp	r3, #1
 80005de:	d118      	bne.n	8000612 <main+0x8a>
		{
			if(HAL_GetTick() - LED_Timestamp >= 500/LED_Freq)
 80005e0:	f000 fd12 	bl	8001008 <HAL_GetTick>
 80005e4:	4602      	mov	r2, r0
 80005e6:	4ba1      	ldr	r3, [pc, #644]	; (800086c <main+0x2e4>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	1ad3      	subs	r3, r2, r3
 80005ec:	4aa0      	ldr	r2, [pc, #640]	; (8000870 <main+0x2e8>)
 80005ee:	8812      	ldrh	r2, [r2, #0]
 80005f0:	4611      	mov	r1, r2
 80005f2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80005f6:	fb92 f2f1 	sdiv	r2, r2, r1
 80005fa:	4293      	cmp	r3, r2
 80005fc:	d30e      	bcc.n	800061c <main+0x94>
			{
				LED_Timestamp = HAL_GetTick();
 80005fe:	f000 fd03 	bl	8001008 <HAL_GetTick>
 8000602:	4603      	mov	r3, r0
 8000604:	4a99      	ldr	r2, [pc, #612]	; (800086c <main+0x2e4>)
 8000606:	6013      	str	r3, [r2, #0]
				HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000608:	2120      	movs	r1, #32
 800060a:	489a      	ldr	r0, [pc, #616]	; (8000874 <main+0x2ec>)
 800060c:	f000 fff1 	bl	80015f2 <HAL_GPIO_TogglePin>
 8000610:	e004      	b.n	800061c <main+0x94>
			}
		}
		else
		{
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 8000612:	2200      	movs	r2, #0
 8000614:	2120      	movs	r1, #32
 8000616:	4897      	ldr	r0, [pc, #604]	; (8000874 <main+0x2ec>)
 8000618:	f000 ffd2 	bl	80015c0 <HAL_GPIO_WritePin>
		}

		Button[1] = Button[0];
 800061c:	4b96      	ldr	r3, [pc, #600]	; (8000878 <main+0x2f0>)
 800061e:	781a      	ldrb	r2, [r3, #0]
 8000620:	4b95      	ldr	r3, [pc, #596]	; (8000878 <main+0x2f0>)
 8000622:	705a      	strb	r2, [r3, #1]
		Button[0] = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 8000624:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000628:	4894      	ldr	r0, [pc, #592]	; (800087c <main+0x2f4>)
 800062a:	f000 ffb1 	bl	8001590 <HAL_GPIO_ReadPin>
 800062e:	4603      	mov	r3, r0
 8000630:	461a      	mov	r2, r3
 8000632:	4b91      	ldr	r3, [pc, #580]	; (8000878 <main+0x2f0>)
 8000634:	701a      	strb	r2, [r3, #0]
//	******************************************************************************
/*
sprintf(TxDataBuffer, "\n----- Main -----\n\r");
HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 100);
*/
		switch(State)
 8000636:	4b92      	ldr	r3, [pc, #584]	; (8000880 <main+0x2f8>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	2b05      	cmp	r3, #5
 800063c:	f200 81ff 	bhi.w	8000a3e <main+0x4b6>
 8000640:	a201      	add	r2, pc, #4	; (adr r2, 8000648 <main+0xc0>)
 8000642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000646:	bf00      	nop
 8000648:	08000661 	.word	0x08000661
 800064c:	080006bd 	.word	0x080006bd
 8000650:	0800070b 	.word	0x0800070b
 8000654:	0800079f 	.word	0x0800079f
 8000658:	08000967 	.word	0x08000967
 800065c:	080009a7 	.word	0x080009a7
		{
			case Mainf:
				sprintf(TxDataBuffer, "\n----- Main -----\n\r");
 8000660:	4988      	ldr	r1, [pc, #544]	; (8000884 <main+0x2fc>)
 8000662:	4889      	ldr	r0, [pc, #548]	; (8000888 <main+0x300>)
 8000664:	f002 fbe0 	bl	8002e28 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 100);
 8000668:	4887      	ldr	r0, [pc, #540]	; (8000888 <main+0x300>)
 800066a:	f7ff fdb9 	bl	80001e0 <strlen>
 800066e:	4603      	mov	r3, r0
 8000670:	b29a      	uxth	r2, r3
 8000672:	2364      	movs	r3, #100	; 0x64
 8000674:	4984      	ldr	r1, [pc, #528]	; (8000888 <main+0x300>)
 8000676:	487a      	ldr	r0, [pc, #488]	; (8000860 <main+0x2d8>)
 8000678:	f001 fc8f 	bl	8001f9a <HAL_UART_Transmit>
				sprintf(TxDataBuffer, "press [0]  LED   Mode\n\r");
 800067c:	4983      	ldr	r1, [pc, #524]	; (800088c <main+0x304>)
 800067e:	4882      	ldr	r0, [pc, #520]	; (8000888 <main+0x300>)
 8000680:	f002 fbd2 	bl	8002e28 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 100);
 8000684:	4880      	ldr	r0, [pc, #512]	; (8000888 <main+0x300>)
 8000686:	f7ff fdab 	bl	80001e0 <strlen>
 800068a:	4603      	mov	r3, r0
 800068c:	b29a      	uxth	r2, r3
 800068e:	2364      	movs	r3, #100	; 0x64
 8000690:	497d      	ldr	r1, [pc, #500]	; (8000888 <main+0x300>)
 8000692:	4873      	ldr	r0, [pc, #460]	; (8000860 <main+0x2d8>)
 8000694:	f001 fc81 	bl	8001f9a <HAL_UART_Transmit>
				sprintf(TxDataBuffer, "press [1] Button Mode\n\r");
 8000698:	497d      	ldr	r1, [pc, #500]	; (8000890 <main+0x308>)
 800069a:	487b      	ldr	r0, [pc, #492]	; (8000888 <main+0x300>)
 800069c:	f002 fbc4 	bl	8002e28 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 100);
 80006a0:	4879      	ldr	r0, [pc, #484]	; (8000888 <main+0x300>)
 80006a2:	f7ff fd9d 	bl	80001e0 <strlen>
 80006a6:	4603      	mov	r3, r0
 80006a8:	b29a      	uxth	r2, r3
 80006aa:	2364      	movs	r3, #100	; 0x64
 80006ac:	4976      	ldr	r1, [pc, #472]	; (8000888 <main+0x300>)
 80006ae:	486c      	ldr	r0, [pc, #432]	; (8000860 <main+0x2d8>)
 80006b0:	f001 fc73 	bl	8001f9a <HAL_UART_Transmit>
				State = Main;
 80006b4:	4b72      	ldr	r3, [pc, #456]	; (8000880 <main+0x2f8>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	701a      	strb	r2, [r3, #0]
				break;
 80006ba:	e1c3      	b.n	8000a44 <main+0x4bc>

			case Main:
				switch(inputchar)
 80006bc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80006c0:	2b31      	cmp	r3, #49	; 0x31
 80006c2:	d00a      	beq.n	80006da <main+0x152>
 80006c4:	2b31      	cmp	r3, #49	; 0x31
 80006c6:	dc0c      	bgt.n	80006e2 <main+0x15a>
 80006c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006cc:	d01b      	beq.n	8000706 <main+0x17e>
 80006ce:	2b30      	cmp	r3, #48	; 0x30
 80006d0:	d107      	bne.n	80006e2 <main+0x15a>
				{
					case -1 :
						break;
					case '0':
						State = Menu0f;
 80006d2:	4b6b      	ldr	r3, [pc, #428]	; (8000880 <main+0x2f8>)
 80006d4:	2202      	movs	r2, #2
 80006d6:	701a      	strb	r2, [r3, #0]
						break;
 80006d8:	e016      	b.n	8000708 <main+0x180>
					case '1':
						State = Menu1f;
 80006da:	4b69      	ldr	r3, [pc, #420]	; (8000880 <main+0x2f8>)
 80006dc:	2204      	movs	r2, #4
 80006de:	701a      	strb	r2, [r3, #0]
						break;
 80006e0:	e012      	b.n	8000708 <main+0x180>
					default:
						sprintf(TxDataBuffer, "\n----- LED -----\n\r");
 80006e2:	496c      	ldr	r1, [pc, #432]	; (8000894 <main+0x30c>)
 80006e4:	4868      	ldr	r0, [pc, #416]	; (8000888 <main+0x300>)
 80006e6:	f002 fb9f 	bl	8002e28 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 100);
 80006ea:	4867      	ldr	r0, [pc, #412]	; (8000888 <main+0x300>)
 80006ec:	f7ff fd78 	bl	80001e0 <strlen>
 80006f0:	4603      	mov	r3, r0
 80006f2:	b29a      	uxth	r2, r3
 80006f4:	2364      	movs	r3, #100	; 0x64
 80006f6:	4964      	ldr	r1, [pc, #400]	; (8000888 <main+0x300>)
 80006f8:	4859      	ldr	r0, [pc, #356]	; (8000860 <main+0x2d8>)
 80006fa:	f001 fc4e 	bl	8001f9a <HAL_UART_Transmit>
						State = Mainf;
 80006fe:	4b60      	ldr	r3, [pc, #384]	; (8000880 <main+0x2f8>)
 8000700:	2200      	movs	r2, #0
 8000702:	701a      	strb	r2, [r3, #0]
						break;
 8000704:	e000      	b.n	8000708 <main+0x180>
						break;
 8000706:	bf00      	nop
				}
				break;
 8000708:	e19c      	b.n	8000a44 <main+0x4bc>

			case Menu0f:
				sprintf(TxDataBuffer, "\n----- LED -----\n\r");
 800070a:	4962      	ldr	r1, [pc, #392]	; (8000894 <main+0x30c>)
 800070c:	485e      	ldr	r0, [pc, #376]	; (8000888 <main+0x300>)
 800070e:	f002 fb8b 	bl	8002e28 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 100);
 8000712:	485d      	ldr	r0, [pc, #372]	; (8000888 <main+0x300>)
 8000714:	f7ff fd64 	bl	80001e0 <strlen>
 8000718:	4603      	mov	r3, r0
 800071a:	b29a      	uxth	r2, r3
 800071c:	2364      	movs	r3, #100	; 0x64
 800071e:	495a      	ldr	r1, [pc, #360]	; (8000888 <main+0x300>)
 8000720:	484f      	ldr	r0, [pc, #316]	; (8000860 <main+0x2d8>)
 8000722:	f001 fc3a 	bl	8001f9a <HAL_UART_Transmit>
				sprintf(TxDataBuffer, "[a] +1 Hz\n\r");
 8000726:	495c      	ldr	r1, [pc, #368]	; (8000898 <main+0x310>)
 8000728:	4857      	ldr	r0, [pc, #348]	; (8000888 <main+0x300>)
 800072a:	f002 fb7d 	bl	8002e28 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 100);
 800072e:	4856      	ldr	r0, [pc, #344]	; (8000888 <main+0x300>)
 8000730:	f7ff fd56 	bl	80001e0 <strlen>
 8000734:	4603      	mov	r3, r0
 8000736:	b29a      	uxth	r2, r3
 8000738:	2364      	movs	r3, #100	; 0x64
 800073a:	4953      	ldr	r1, [pc, #332]	; (8000888 <main+0x300>)
 800073c:	4848      	ldr	r0, [pc, #288]	; (8000860 <main+0x2d8>)
 800073e:	f001 fc2c 	bl	8001f9a <HAL_UART_Transmit>
				sprintf(TxDataBuffer, "[s] -1 Hz\n\r");
 8000742:	4956      	ldr	r1, [pc, #344]	; (800089c <main+0x314>)
 8000744:	4850      	ldr	r0, [pc, #320]	; (8000888 <main+0x300>)
 8000746:	f002 fb6f 	bl	8002e28 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 100);
 800074a:	484f      	ldr	r0, [pc, #316]	; (8000888 <main+0x300>)
 800074c:	f7ff fd48 	bl	80001e0 <strlen>
 8000750:	4603      	mov	r3, r0
 8000752:	b29a      	uxth	r2, r3
 8000754:	2364      	movs	r3, #100	; 0x64
 8000756:	494c      	ldr	r1, [pc, #304]	; (8000888 <main+0x300>)
 8000758:	4841      	ldr	r0, [pc, #260]	; (8000860 <main+0x2d8>)
 800075a:	f001 fc1e 	bl	8001f9a <HAL_UART_Transmit>
				sprintf(TxDataBuffer, "[d] on/off\n\r");
 800075e:	4950      	ldr	r1, [pc, #320]	; (80008a0 <main+0x318>)
 8000760:	4849      	ldr	r0, [pc, #292]	; (8000888 <main+0x300>)
 8000762:	f002 fb61 	bl	8002e28 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 100);
 8000766:	4848      	ldr	r0, [pc, #288]	; (8000888 <main+0x300>)
 8000768:	f7ff fd3a 	bl	80001e0 <strlen>
 800076c:	4603      	mov	r3, r0
 800076e:	b29a      	uxth	r2, r3
 8000770:	2364      	movs	r3, #100	; 0x64
 8000772:	4945      	ldr	r1, [pc, #276]	; (8000888 <main+0x300>)
 8000774:	483a      	ldr	r0, [pc, #232]	; (8000860 <main+0x2d8>)
 8000776:	f001 fc10 	bl	8001f9a <HAL_UART_Transmit>
				sprintf(TxDataBuffer, "[x] back\n\r");
 800077a:	494a      	ldr	r1, [pc, #296]	; (80008a4 <main+0x31c>)
 800077c:	4842      	ldr	r0, [pc, #264]	; (8000888 <main+0x300>)
 800077e:	f002 fb53 	bl	8002e28 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 100);
 8000782:	4841      	ldr	r0, [pc, #260]	; (8000888 <main+0x300>)
 8000784:	f7ff fd2c 	bl	80001e0 <strlen>
 8000788:	4603      	mov	r3, r0
 800078a:	b29a      	uxth	r2, r3
 800078c:	2364      	movs	r3, #100	; 0x64
 800078e:	493e      	ldr	r1, [pc, #248]	; (8000888 <main+0x300>)
 8000790:	4833      	ldr	r0, [pc, #204]	; (8000860 <main+0x2d8>)
 8000792:	f001 fc02 	bl	8001f9a <HAL_UART_Transmit>
				State = Menu0;
 8000796:	4b3a      	ldr	r3, [pc, #232]	; (8000880 <main+0x2f8>)
 8000798:	2203      	movs	r2, #3
 800079a:	701a      	strb	r2, [r3, #0]
				break;
 800079c:	e152      	b.n	8000a44 <main+0x4bc>

			case Menu0:
				switch(inputchar)
 800079e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80007a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007a6:	f000 80dc 	beq.w	8000962 <main+0x3da>
 80007aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007ae:	f2c0 80c9 	blt.w	8000944 <main+0x3bc>
 80007b2:	2b78      	cmp	r3, #120	; 0x78
 80007b4:	f300 80c6 	bgt.w	8000944 <main+0x3bc>
 80007b8:	2b61      	cmp	r3, #97	; 0x61
 80007ba:	f2c0 80c3 	blt.w	8000944 <main+0x3bc>
 80007be:	3b61      	subs	r3, #97	; 0x61
 80007c0:	2b17      	cmp	r3, #23
 80007c2:	f200 80bf 	bhi.w	8000944 <main+0x3bc>
 80007c6:	a201      	add	r2, pc, #4	; (adr r2, 80007cc <main+0x244>)
 80007c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007cc:	0800082d 	.word	0x0800082d
 80007d0:	08000945 	.word	0x08000945
 80007d4:	08000945 	.word	0x08000945
 80007d8:	080008e5 	.word	0x080008e5
 80007dc:	08000945 	.word	0x08000945
 80007e0:	08000945 	.word	0x08000945
 80007e4:	08000945 	.word	0x08000945
 80007e8:	08000945 	.word	0x08000945
 80007ec:	08000945 	.word	0x08000945
 80007f0:	08000945 	.word	0x08000945
 80007f4:	08000945 	.word	0x08000945
 80007f8:	08000945 	.word	0x08000945
 80007fc:	08000945 	.word	0x08000945
 8000800:	08000945 	.word	0x08000945
 8000804:	08000945 	.word	0x08000945
 8000808:	08000945 	.word	0x08000945
 800080c:	08000945 	.word	0x08000945
 8000810:	08000945 	.word	0x08000945
 8000814:	080008ad 	.word	0x080008ad
 8000818:	08000945 	.word	0x08000945
 800081c:	08000945 	.word	0x08000945
 8000820:	08000945 	.word	0x08000945
 8000824:	08000945 	.word	0x08000945
 8000828:	0800093d 	.word	0x0800093d
				{
					case -1 :
						break;

					case 'a':
						LED_Freq += 1;
 800082c:	4b10      	ldr	r3, [pc, #64]	; (8000870 <main+0x2e8>)
 800082e:	881b      	ldrh	r3, [r3, #0]
 8000830:	3301      	adds	r3, #1
 8000832:	b29a      	uxth	r2, r3
 8000834:	4b0e      	ldr	r3, [pc, #56]	; (8000870 <main+0x2e8>)
 8000836:	801a      	strh	r2, [r3, #0]
						sprintf(TxDataBuffer, "LED freq %d Hz\n\r",LED_Freq);
 8000838:	4b0d      	ldr	r3, [pc, #52]	; (8000870 <main+0x2e8>)
 800083a:	881b      	ldrh	r3, [r3, #0]
 800083c:	461a      	mov	r2, r3
 800083e:	491a      	ldr	r1, [pc, #104]	; (80008a8 <main+0x320>)
 8000840:	4811      	ldr	r0, [pc, #68]	; (8000888 <main+0x300>)
 8000842:	f002 faf1 	bl	8002e28 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 100);
 8000846:	4810      	ldr	r0, [pc, #64]	; (8000888 <main+0x300>)
 8000848:	f7ff fcca 	bl	80001e0 <strlen>
 800084c:	4603      	mov	r3, r0
 800084e:	b29a      	uxth	r2, r3
 8000850:	2364      	movs	r3, #100	; 0x64
 8000852:	490d      	ldr	r1, [pc, #52]	; (8000888 <main+0x300>)
 8000854:	4802      	ldr	r0, [pc, #8]	; (8000860 <main+0x2d8>)
 8000856:	f001 fba0 	bl	8001f9a <HAL_UART_Transmit>
						break;
 800085a:	e083      	b.n	8000964 <main+0x3dc>
 800085c:	080037c4 	.word	0x080037c4
 8000860:	200000f0 	.word	0x200000f0
 8000864:	200000b4 	.word	0x200000b4
 8000868:	20000000 	.word	0x20000000
 800086c:	200000d8 	.word	0x200000d8
 8000870:	200000d4 	.word	0x200000d4
 8000874:	40020000 	.word	0x40020000
 8000878:	20000004 	.word	0x20000004
 800087c:	40020800 	.word	0x40020800
 8000880:	200000dc 	.word	0x200000dc
 8000884:	0800369c 	.word	0x0800369c
 8000888:	20000094 	.word	0x20000094
 800088c:	080036b0 	.word	0x080036b0
 8000890:	080036c8 	.word	0x080036c8
 8000894:	080036e0 	.word	0x080036e0
 8000898:	080036f4 	.word	0x080036f4
 800089c:	08003700 	.word	0x08003700
 80008a0:	0800370c 	.word	0x0800370c
 80008a4:	0800371c 	.word	0x0800371c
 80008a8:	08003728 	.word	0x08003728

					case 's':
						if(LED_Freq != 0)
 80008ac:	4b66      	ldr	r3, [pc, #408]	; (8000a48 <main+0x4c0>)
 80008ae:	881b      	ldrh	r3, [r3, #0]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d005      	beq.n	80008c0 <main+0x338>
						{
							LED_Freq -= 1;
 80008b4:	4b64      	ldr	r3, [pc, #400]	; (8000a48 <main+0x4c0>)
 80008b6:	881b      	ldrh	r3, [r3, #0]
 80008b8:	3b01      	subs	r3, #1
 80008ba:	b29a      	uxth	r2, r3
 80008bc:	4b62      	ldr	r3, [pc, #392]	; (8000a48 <main+0x4c0>)
 80008be:	801a      	strh	r2, [r3, #0]
						}
						sprintf(TxDataBuffer, "LED freq %d Hz\n\r",LED_Freq);
 80008c0:	4b61      	ldr	r3, [pc, #388]	; (8000a48 <main+0x4c0>)
 80008c2:	881b      	ldrh	r3, [r3, #0]
 80008c4:	461a      	mov	r2, r3
 80008c6:	4961      	ldr	r1, [pc, #388]	; (8000a4c <main+0x4c4>)
 80008c8:	4861      	ldr	r0, [pc, #388]	; (8000a50 <main+0x4c8>)
 80008ca:	f002 faad 	bl	8002e28 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 100);
 80008ce:	4860      	ldr	r0, [pc, #384]	; (8000a50 <main+0x4c8>)
 80008d0:	f7ff fc86 	bl	80001e0 <strlen>
 80008d4:	4603      	mov	r3, r0
 80008d6:	b29a      	uxth	r2, r3
 80008d8:	2364      	movs	r3, #100	; 0x64
 80008da:	495d      	ldr	r1, [pc, #372]	; (8000a50 <main+0x4c8>)
 80008dc:	485d      	ldr	r0, [pc, #372]	; (8000a54 <main+0x4cc>)
 80008de:	f001 fb5c 	bl	8001f9a <HAL_UART_Transmit>
						break;
 80008e2:	e03f      	b.n	8000964 <main+0x3dc>

					case 'd':
						LED_Status = !LED_Status;
 80008e4:	4b5c      	ldr	r3, [pc, #368]	; (8000a58 <main+0x4d0>)
 80008e6:	881b      	ldrh	r3, [r3, #0]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	bf0c      	ite	eq
 80008ec:	2301      	moveq	r3, #1
 80008ee:	2300      	movne	r3, #0
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	b29a      	uxth	r2, r3
 80008f4:	4b58      	ldr	r3, [pc, #352]	; (8000a58 <main+0x4d0>)
 80008f6:	801a      	strh	r2, [r3, #0]
						if(LED_Status == 1)
 80008f8:	4b57      	ldr	r3, [pc, #348]	; (8000a58 <main+0x4d0>)
 80008fa:	881b      	ldrh	r3, [r3, #0]
 80008fc:	2b01      	cmp	r3, #1
 80008fe:	d10e      	bne.n	800091e <main+0x396>
						{
							sprintf(TxDataBuffer, "LED ON \n\r");
 8000900:	4956      	ldr	r1, [pc, #344]	; (8000a5c <main+0x4d4>)
 8000902:	4853      	ldr	r0, [pc, #332]	; (8000a50 <main+0x4c8>)
 8000904:	f002 fa90 	bl	8002e28 <siprintf>
							HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 100);
 8000908:	4851      	ldr	r0, [pc, #324]	; (8000a50 <main+0x4c8>)
 800090a:	f7ff fc69 	bl	80001e0 <strlen>
 800090e:	4603      	mov	r3, r0
 8000910:	b29a      	uxth	r2, r3
 8000912:	2364      	movs	r3, #100	; 0x64
 8000914:	494e      	ldr	r1, [pc, #312]	; (8000a50 <main+0x4c8>)
 8000916:	484f      	ldr	r0, [pc, #316]	; (8000a54 <main+0x4cc>)
 8000918:	f001 fb3f 	bl	8001f9a <HAL_UART_Transmit>
						else
						{
							sprintf(TxDataBuffer, "LED OFF\n\r");
							HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 100);
						}
						break;
 800091c:	e022      	b.n	8000964 <main+0x3dc>
							sprintf(TxDataBuffer, "LED OFF\n\r");
 800091e:	4950      	ldr	r1, [pc, #320]	; (8000a60 <main+0x4d8>)
 8000920:	484b      	ldr	r0, [pc, #300]	; (8000a50 <main+0x4c8>)
 8000922:	f002 fa81 	bl	8002e28 <siprintf>
							HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 100);
 8000926:	484a      	ldr	r0, [pc, #296]	; (8000a50 <main+0x4c8>)
 8000928:	f7ff fc5a 	bl	80001e0 <strlen>
 800092c:	4603      	mov	r3, r0
 800092e:	b29a      	uxth	r2, r3
 8000930:	2364      	movs	r3, #100	; 0x64
 8000932:	4947      	ldr	r1, [pc, #284]	; (8000a50 <main+0x4c8>)
 8000934:	4847      	ldr	r0, [pc, #284]	; (8000a54 <main+0x4cc>)
 8000936:	f001 fb30 	bl	8001f9a <HAL_UART_Transmit>
						break;
 800093a:	e013      	b.n	8000964 <main+0x3dc>

					case 'x':
						State = Mainf;
 800093c:	4b49      	ldr	r3, [pc, #292]	; (8000a64 <main+0x4dc>)
 800093e:	2200      	movs	r2, #0
 8000940:	701a      	strb	r2, [r3, #0]
						break;
 8000942:	e00f      	b.n	8000964 <main+0x3dc>

					default:
						sprintf(TxDataBuffer, "\nOnly a s d x\n\r");
 8000944:	4948      	ldr	r1, [pc, #288]	; (8000a68 <main+0x4e0>)
 8000946:	4842      	ldr	r0, [pc, #264]	; (8000a50 <main+0x4c8>)
 8000948:	f002 fa6e 	bl	8002e28 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 100);
 800094c:	4840      	ldr	r0, [pc, #256]	; (8000a50 <main+0x4c8>)
 800094e:	f7ff fc47 	bl	80001e0 <strlen>
 8000952:	4603      	mov	r3, r0
 8000954:	b29a      	uxth	r2, r3
 8000956:	2364      	movs	r3, #100	; 0x64
 8000958:	493d      	ldr	r1, [pc, #244]	; (8000a50 <main+0x4c8>)
 800095a:	483e      	ldr	r0, [pc, #248]	; (8000a54 <main+0x4cc>)
 800095c:	f001 fb1d 	bl	8001f9a <HAL_UART_Transmit>
						break;
 8000960:	e000      	b.n	8000964 <main+0x3dc>
						break;
 8000962:	bf00      	nop
				}
				break;
 8000964:	e06e      	b.n	8000a44 <main+0x4bc>

//		****************************************************************************************

			case Menu1f:
				sprintf(TxDataBuffer, "\n----- Button -----\n\r");
 8000966:	4941      	ldr	r1, [pc, #260]	; (8000a6c <main+0x4e4>)
 8000968:	4839      	ldr	r0, [pc, #228]	; (8000a50 <main+0x4c8>)
 800096a:	f002 fa5d 	bl	8002e28 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 100);
 800096e:	4838      	ldr	r0, [pc, #224]	; (8000a50 <main+0x4c8>)
 8000970:	f7ff fc36 	bl	80001e0 <strlen>
 8000974:	4603      	mov	r3, r0
 8000976:	b29a      	uxth	r2, r3
 8000978:	2364      	movs	r3, #100	; 0x64
 800097a:	4935      	ldr	r1, [pc, #212]	; (8000a50 <main+0x4c8>)
 800097c:	4835      	ldr	r0, [pc, #212]	; (8000a54 <main+0x4cc>)
 800097e:	f001 fb0c 	bl	8001f9a <HAL_UART_Transmit>
				sprintf(TxDataBuffer, "[x] Back\n\r");
 8000982:	493b      	ldr	r1, [pc, #236]	; (8000a70 <main+0x4e8>)
 8000984:	4832      	ldr	r0, [pc, #200]	; (8000a50 <main+0x4c8>)
 8000986:	f002 fa4f 	bl	8002e28 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 100);
 800098a:	4831      	ldr	r0, [pc, #196]	; (8000a50 <main+0x4c8>)
 800098c:	f7ff fc28 	bl	80001e0 <strlen>
 8000990:	4603      	mov	r3, r0
 8000992:	b29a      	uxth	r2, r3
 8000994:	2364      	movs	r3, #100	; 0x64
 8000996:	492e      	ldr	r1, [pc, #184]	; (8000a50 <main+0x4c8>)
 8000998:	482e      	ldr	r0, [pc, #184]	; (8000a54 <main+0x4cc>)
 800099a:	f001 fafe 	bl	8001f9a <HAL_UART_Transmit>
				State = Menu1;
 800099e:	4b31      	ldr	r3, [pc, #196]	; (8000a64 <main+0x4dc>)
 80009a0:	2205      	movs	r2, #5
 80009a2:	701a      	strb	r2, [r3, #0]
				break;
 80009a4:	e04e      	b.n	8000a44 <main+0x4bc>

			case Menu1:
				switch(inputchar)
 80009a6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80009aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009ae:	d017      	beq.n	80009e0 <main+0x458>
 80009b0:	2b78      	cmp	r3, #120	; 0x78
 80009b2:	d103      	bne.n	80009bc <main+0x434>
				{
					case -1:
						break;

					case 'x':
						State = Mainf;
 80009b4:	4b2b      	ldr	r3, [pc, #172]	; (8000a64 <main+0x4dc>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	701a      	strb	r2, [r3, #0]
						break;
 80009ba:	e012      	b.n	80009e2 <main+0x45a>

					default:
						sprintf(TxDataBuffer, "\nOnly x\n\r");
 80009bc:	492d      	ldr	r1, [pc, #180]	; (8000a74 <main+0x4ec>)
 80009be:	4824      	ldr	r0, [pc, #144]	; (8000a50 <main+0x4c8>)
 80009c0:	f002 fa32 	bl	8002e28 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 100);
 80009c4:	4822      	ldr	r0, [pc, #136]	; (8000a50 <main+0x4c8>)
 80009c6:	f7ff fc0b 	bl	80001e0 <strlen>
 80009ca:	4603      	mov	r3, r0
 80009cc:	b29a      	uxth	r2, r3
 80009ce:	2364      	movs	r3, #100	; 0x64
 80009d0:	491f      	ldr	r1, [pc, #124]	; (8000a50 <main+0x4c8>)
 80009d2:	4820      	ldr	r0, [pc, #128]	; (8000a54 <main+0x4cc>)
 80009d4:	f001 fae1 	bl	8001f9a <HAL_UART_Transmit>
						State = Menu1f;
 80009d8:	4b22      	ldr	r3, [pc, #136]	; (8000a64 <main+0x4dc>)
 80009da:	2204      	movs	r2, #4
 80009dc:	701a      	strb	r2, [r3, #0]
						break;
 80009de:	e000      	b.n	80009e2 <main+0x45a>
						break;
 80009e0:	bf00      	nop
				}
				if(Button[0] == 0 && Button[1] == 1)
 80009e2:	4b25      	ldr	r3, [pc, #148]	; (8000a78 <main+0x4f0>)
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d112      	bne.n	8000a10 <main+0x488>
 80009ea:	4b23      	ldr	r3, [pc, #140]	; (8000a78 <main+0x4f0>)
 80009ec:	785b      	ldrb	r3, [r3, #1]
 80009ee:	2b01      	cmp	r3, #1
 80009f0:	d10e      	bne.n	8000a10 <main+0x488>
				{
					sprintf(TxDataBuffer, "Button was pressed\n\r");
 80009f2:	4922      	ldr	r1, [pc, #136]	; (8000a7c <main+0x4f4>)
 80009f4:	4816      	ldr	r0, [pc, #88]	; (8000a50 <main+0x4c8>)
 80009f6:	f002 fa17 	bl	8002e28 <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 100);
 80009fa:	4815      	ldr	r0, [pc, #84]	; (8000a50 <main+0x4c8>)
 80009fc:	f7ff fbf0 	bl	80001e0 <strlen>
 8000a00:	4603      	mov	r3, r0
 8000a02:	b29a      	uxth	r2, r3
 8000a04:	2364      	movs	r3, #100	; 0x64
 8000a06:	4912      	ldr	r1, [pc, #72]	; (8000a50 <main+0x4c8>)
 8000a08:	4812      	ldr	r0, [pc, #72]	; (8000a54 <main+0x4cc>)
 8000a0a:	f001 fac6 	bl	8001f9a <HAL_UART_Transmit>
				else if(Button[0] == 1 && Button[1] == 0)
				{
					sprintf(TxDataBuffer, "Button was released\n\r");
					HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 100);
				}
				break;
 8000a0e:	e018      	b.n	8000a42 <main+0x4ba>
				else if(Button[0] == 1 && Button[1] == 0)
 8000a10:	4b19      	ldr	r3, [pc, #100]	; (8000a78 <main+0x4f0>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	2b01      	cmp	r3, #1
 8000a16:	d114      	bne.n	8000a42 <main+0x4ba>
 8000a18:	4b17      	ldr	r3, [pc, #92]	; (8000a78 <main+0x4f0>)
 8000a1a:	785b      	ldrb	r3, [r3, #1]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d110      	bne.n	8000a42 <main+0x4ba>
					sprintf(TxDataBuffer, "Button was released\n\r");
 8000a20:	4917      	ldr	r1, [pc, #92]	; (8000a80 <main+0x4f8>)
 8000a22:	480b      	ldr	r0, [pc, #44]	; (8000a50 <main+0x4c8>)
 8000a24:	f002 fa00 	bl	8002e28 <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 100);
 8000a28:	4809      	ldr	r0, [pc, #36]	; (8000a50 <main+0x4c8>)
 8000a2a:	f7ff fbd9 	bl	80001e0 <strlen>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	b29a      	uxth	r2, r3
 8000a32:	2364      	movs	r3, #100	; 0x64
 8000a34:	4906      	ldr	r1, [pc, #24]	; (8000a50 <main+0x4c8>)
 8000a36:	4807      	ldr	r0, [pc, #28]	; (8000a54 <main+0x4cc>)
 8000a38:	f001 faaf 	bl	8001f9a <HAL_UART_Transmit>
				break;
 8000a3c:	e001      	b.n	8000a42 <main+0x4ba>

			default:
				break;
 8000a3e:	bf00      	nop
 8000a40:	e5c1      	b.n	80005c6 <main+0x3e>
				break;
 8000a42:	bf00      	nop
	{
 8000a44:	e5bf      	b.n	80005c6 <main+0x3e>
 8000a46:	bf00      	nop
 8000a48:	200000d4 	.word	0x200000d4
 8000a4c:	08003728 	.word	0x08003728
 8000a50:	20000094 	.word	0x20000094
 8000a54:	200000f0 	.word	0x200000f0
 8000a58:	20000000 	.word	0x20000000
 8000a5c:	0800373c 	.word	0x0800373c
 8000a60:	08003748 	.word	0x08003748
 8000a64:	200000dc 	.word	0x200000dc
 8000a68:	08003754 	.word	0x08003754
 8000a6c:	08003764 	.word	0x08003764
 8000a70:	0800377c 	.word	0x0800377c
 8000a74:	08003788 	.word	0x08003788
 8000a78:	20000004 	.word	0x20000004
 8000a7c:	08003794 	.word	0x08003794
 8000a80:	080037ac 	.word	0x080037ac

08000a84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b094      	sub	sp, #80	; 0x50
 8000a88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a8a:	f107 0320 	add.w	r3, r7, #32
 8000a8e:	2230      	movs	r2, #48	; 0x30
 8000a90:	2100      	movs	r1, #0
 8000a92:	4618      	mov	r0, r3
 8000a94:	f002 f9c0 	bl	8002e18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a98:	f107 030c 	add.w	r3, r7, #12
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
 8000aa0:	605a      	str	r2, [r3, #4]
 8000aa2:	609a      	str	r2, [r3, #8]
 8000aa4:	60da      	str	r2, [r3, #12]
 8000aa6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	60bb      	str	r3, [r7, #8]
 8000aac:	4b28      	ldr	r3, [pc, #160]	; (8000b50 <SystemClock_Config+0xcc>)
 8000aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab0:	4a27      	ldr	r2, [pc, #156]	; (8000b50 <SystemClock_Config+0xcc>)
 8000ab2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ab6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ab8:	4b25      	ldr	r3, [pc, #148]	; (8000b50 <SystemClock_Config+0xcc>)
 8000aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000abc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ac0:	60bb      	str	r3, [r7, #8]
 8000ac2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	607b      	str	r3, [r7, #4]
 8000ac8:	4b22      	ldr	r3, [pc, #136]	; (8000b54 <SystemClock_Config+0xd0>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a21      	ldr	r2, [pc, #132]	; (8000b54 <SystemClock_Config+0xd0>)
 8000ace:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ad2:	6013      	str	r3, [r2, #0]
 8000ad4:	4b1f      	ldr	r3, [pc, #124]	; (8000b54 <SystemClock_Config+0xd0>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000adc:	607b      	str	r3, [r7, #4]
 8000ade:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ae8:	2310      	movs	r3, #16
 8000aea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aec:	2302      	movs	r3, #2
 8000aee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000af0:	2300      	movs	r3, #0
 8000af2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000af4:	2310      	movs	r3, #16
 8000af6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000af8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000afc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000afe:	2304      	movs	r3, #4
 8000b00:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b02:	2304      	movs	r3, #4
 8000b04:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b06:	f107 0320 	add.w	r3, r7, #32
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f000 fd8c 	bl	8001628 <HAL_RCC_OscConfig>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000b16:	f000 f8e9 	bl	8000cec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b1a:	230f      	movs	r3, #15
 8000b1c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b22:	2300      	movs	r3, #0
 8000b24:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b2a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b30:	f107 030c 	add.w	r3, r7, #12
 8000b34:	2102      	movs	r1, #2
 8000b36:	4618      	mov	r0, r3
 8000b38:	f000 ffe6 	bl	8001b08 <HAL_RCC_ClockConfig>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000b42:	f000 f8d3 	bl	8000cec <Error_Handler>
  }
}
 8000b46:	bf00      	nop
 8000b48:	3750      	adds	r7, #80	; 0x50
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40023800 	.word	0x40023800
 8000b54:	40007000 	.word	0x40007000

08000b58 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b5c:	4b11      	ldr	r3, [pc, #68]	; (8000ba4 <MX_USART2_UART_Init+0x4c>)
 8000b5e:	4a12      	ldr	r2, [pc, #72]	; (8000ba8 <MX_USART2_UART_Init+0x50>)
 8000b60:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b62:	4b10      	ldr	r3, [pc, #64]	; (8000ba4 <MX_USART2_UART_Init+0x4c>)
 8000b64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b68:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ba4 <MX_USART2_UART_Init+0x4c>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b70:	4b0c      	ldr	r3, [pc, #48]	; (8000ba4 <MX_USART2_UART_Init+0x4c>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b76:	4b0b      	ldr	r3, [pc, #44]	; (8000ba4 <MX_USART2_UART_Init+0x4c>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b7c:	4b09      	ldr	r3, [pc, #36]	; (8000ba4 <MX_USART2_UART_Init+0x4c>)
 8000b7e:	220c      	movs	r2, #12
 8000b80:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b82:	4b08      	ldr	r3, [pc, #32]	; (8000ba4 <MX_USART2_UART_Init+0x4c>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b88:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <MX_USART2_UART_Init+0x4c>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b8e:	4805      	ldr	r0, [pc, #20]	; (8000ba4 <MX_USART2_UART_Init+0x4c>)
 8000b90:	f001 f9b6 	bl	8001f00 <HAL_UART_Init>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b9a:	f000 f8a7 	bl	8000cec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b9e:	bf00      	nop
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	200000f0 	.word	0x200000f0
 8000ba8:	40004400 	.word	0x40004400

08000bac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b08a      	sub	sp, #40	; 0x28
 8000bb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb2:	f107 0314 	add.w	r3, r7, #20
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	601a      	str	r2, [r3, #0]
 8000bba:	605a      	str	r2, [r3, #4]
 8000bbc:	609a      	str	r2, [r3, #8]
 8000bbe:	60da      	str	r2, [r3, #12]
 8000bc0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	613b      	str	r3, [r7, #16]
 8000bc6:	4b2d      	ldr	r3, [pc, #180]	; (8000c7c <MX_GPIO_Init+0xd0>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	4a2c      	ldr	r2, [pc, #176]	; (8000c7c <MX_GPIO_Init+0xd0>)
 8000bcc:	f043 0304 	orr.w	r3, r3, #4
 8000bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd2:	4b2a      	ldr	r3, [pc, #168]	; (8000c7c <MX_GPIO_Init+0xd0>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	f003 0304 	and.w	r3, r3, #4
 8000bda:	613b      	str	r3, [r7, #16]
 8000bdc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	60fb      	str	r3, [r7, #12]
 8000be2:	4b26      	ldr	r3, [pc, #152]	; (8000c7c <MX_GPIO_Init+0xd0>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	4a25      	ldr	r2, [pc, #148]	; (8000c7c <MX_GPIO_Init+0xd0>)
 8000be8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bec:	6313      	str	r3, [r2, #48]	; 0x30
 8000bee:	4b23      	ldr	r3, [pc, #140]	; (8000c7c <MX_GPIO_Init+0xd0>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bf6:	60fb      	str	r3, [r7, #12]
 8000bf8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	60bb      	str	r3, [r7, #8]
 8000bfe:	4b1f      	ldr	r3, [pc, #124]	; (8000c7c <MX_GPIO_Init+0xd0>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	4a1e      	ldr	r2, [pc, #120]	; (8000c7c <MX_GPIO_Init+0xd0>)
 8000c04:	f043 0301 	orr.w	r3, r3, #1
 8000c08:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0a:	4b1c      	ldr	r3, [pc, #112]	; (8000c7c <MX_GPIO_Init+0xd0>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	f003 0301 	and.w	r3, r3, #1
 8000c12:	60bb      	str	r3, [r7, #8]
 8000c14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	607b      	str	r3, [r7, #4]
 8000c1a:	4b18      	ldr	r3, [pc, #96]	; (8000c7c <MX_GPIO_Init+0xd0>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	4a17      	ldr	r2, [pc, #92]	; (8000c7c <MX_GPIO_Init+0xd0>)
 8000c20:	f043 0302 	orr.w	r3, r3, #2
 8000c24:	6313      	str	r3, [r2, #48]	; 0x30
 8000c26:	4b15      	ldr	r3, [pc, #84]	; (8000c7c <MX_GPIO_Init+0xd0>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	f003 0302 	and.w	r3, r3, #2
 8000c2e:	607b      	str	r3, [r7, #4]
 8000c30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c32:	2200      	movs	r2, #0
 8000c34:	2120      	movs	r1, #32
 8000c36:	4812      	ldr	r0, [pc, #72]	; (8000c80 <MX_GPIO_Init+0xd4>)
 8000c38:	f000 fcc2 	bl	80015c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c42:	4b10      	ldr	r3, [pc, #64]	; (8000c84 <MX_GPIO_Init+0xd8>)
 8000c44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c46:	2300      	movs	r3, #0
 8000c48:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c4a:	f107 0314 	add.w	r3, r7, #20
 8000c4e:	4619      	mov	r1, r3
 8000c50:	480d      	ldr	r0, [pc, #52]	; (8000c88 <MX_GPIO_Init+0xdc>)
 8000c52:	f000 fb19 	bl	8001288 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c56:	2320      	movs	r3, #32
 8000c58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c62:	2300      	movs	r3, #0
 8000c64:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c66:	f107 0314 	add.w	r3, r7, #20
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4804      	ldr	r0, [pc, #16]	; (8000c80 <MX_GPIO_Init+0xd4>)
 8000c6e:	f000 fb0b 	bl	8001288 <HAL_GPIO_Init>

}
 8000c72:	bf00      	nop
 8000c74:	3728      	adds	r7, #40	; 0x28
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40023800 	.word	0x40023800
 8000c80:	40020000 	.word	0x40020000
 8000c84:	10210000 	.word	0x10210000
 8000c88:	40020800 	.word	0x40020800

08000c8c <UARTRecieveIT>:

}


int16_t UARTRecieveIT()
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
	static uint32_t dataPos =0;
	int16_t data=-1;
 8000c92:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c96:	80fb      	strh	r3, [r7, #6]
	if(huart2.RxXferSize - huart2.RxXferCount!=dataPos)
 8000c98:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <UARTRecieveIT+0x54>)
 8000c9a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8000c9c:	461a      	mov	r2, r3
 8000c9e:	4b10      	ldr	r3, [pc, #64]	; (8000ce0 <UARTRecieveIT+0x54>)
 8000ca0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8000ca2:	b29b      	uxth	r3, r3
 8000ca4:	1ad3      	subs	r3, r2, r3
 8000ca6:	4a0f      	ldr	r2, [pc, #60]	; (8000ce4 <UARTRecieveIT+0x58>)
 8000ca8:	6812      	ldr	r2, [r2, #0]
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d010      	beq.n	8000cd0 <UARTRecieveIT+0x44>
	{
		data=RxDataBuffer[dataPos];
 8000cae:	4b0d      	ldr	r3, [pc, #52]	; (8000ce4 <UARTRecieveIT+0x58>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4a0d      	ldr	r2, [pc, #52]	; (8000ce8 <UARTRecieveIT+0x5c>)
 8000cb4:	5cd3      	ldrb	r3, [r2, r3]
 8000cb6:	80fb      	strh	r3, [r7, #6]
		dataPos= (dataPos+1)%huart2.RxXferSize;
 8000cb8:	4b0a      	ldr	r3, [pc, #40]	; (8000ce4 <UARTRecieveIT+0x58>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	4a08      	ldr	r2, [pc, #32]	; (8000ce0 <UARTRecieveIT+0x54>)
 8000cc0:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8000cc2:	fbb3 f1f2 	udiv	r1, r3, r2
 8000cc6:	fb02 f201 	mul.w	r2, r2, r1
 8000cca:	1a9b      	subs	r3, r3, r2
 8000ccc:	4a05      	ldr	r2, [pc, #20]	; (8000ce4 <UARTRecieveIT+0x58>)
 8000cce:	6013      	str	r3, [r2, #0]
	}
	return data;
 8000cd0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	370c      	adds	r7, #12
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr
 8000ce0:	200000f0 	.word	0x200000f0
 8000ce4:	200000e0 	.word	0x200000e0
 8000ce8:	200000b4 	.word	0x200000b4

08000cec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cf0:	b672      	cpsid	i
}
 8000cf2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000cf4:	e7fe      	b.n	8000cf4 <Error_Handler+0x8>
	...

08000cf8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	607b      	str	r3, [r7, #4]
 8000d02:	4b10      	ldr	r3, [pc, #64]	; (8000d44 <HAL_MspInit+0x4c>)
 8000d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d06:	4a0f      	ldr	r2, [pc, #60]	; (8000d44 <HAL_MspInit+0x4c>)
 8000d08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d0e:	4b0d      	ldr	r3, [pc, #52]	; (8000d44 <HAL_MspInit+0x4c>)
 8000d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d16:	607b      	str	r3, [r7, #4]
 8000d18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	603b      	str	r3, [r7, #0]
 8000d1e:	4b09      	ldr	r3, [pc, #36]	; (8000d44 <HAL_MspInit+0x4c>)
 8000d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d22:	4a08      	ldr	r2, [pc, #32]	; (8000d44 <HAL_MspInit+0x4c>)
 8000d24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d28:	6413      	str	r3, [r2, #64]	; 0x40
 8000d2a:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <HAL_MspInit+0x4c>)
 8000d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d32:	603b      	str	r3, [r7, #0]
 8000d34:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d36:	2007      	movs	r0, #7
 8000d38:	f000 fa42 	bl	80011c0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d3c:	bf00      	nop
 8000d3e:	3708      	adds	r7, #8
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	40023800 	.word	0x40023800

08000d48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b08a      	sub	sp, #40	; 0x28
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d50:	f107 0314 	add.w	r3, r7, #20
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	605a      	str	r2, [r3, #4]
 8000d5a:	609a      	str	r2, [r3, #8]
 8000d5c:	60da      	str	r2, [r3, #12]
 8000d5e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a1d      	ldr	r2, [pc, #116]	; (8000ddc <HAL_UART_MspInit+0x94>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d133      	bne.n	8000dd2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	613b      	str	r3, [r7, #16]
 8000d6e:	4b1c      	ldr	r3, [pc, #112]	; (8000de0 <HAL_UART_MspInit+0x98>)
 8000d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d72:	4a1b      	ldr	r2, [pc, #108]	; (8000de0 <HAL_UART_MspInit+0x98>)
 8000d74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d78:	6413      	str	r3, [r2, #64]	; 0x40
 8000d7a:	4b19      	ldr	r3, [pc, #100]	; (8000de0 <HAL_UART_MspInit+0x98>)
 8000d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d82:	613b      	str	r3, [r7, #16]
 8000d84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d86:	2300      	movs	r3, #0
 8000d88:	60fb      	str	r3, [r7, #12]
 8000d8a:	4b15      	ldr	r3, [pc, #84]	; (8000de0 <HAL_UART_MspInit+0x98>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	4a14      	ldr	r2, [pc, #80]	; (8000de0 <HAL_UART_MspInit+0x98>)
 8000d90:	f043 0301 	orr.w	r3, r3, #1
 8000d94:	6313      	str	r3, [r2, #48]	; 0x30
 8000d96:	4b12      	ldr	r3, [pc, #72]	; (8000de0 <HAL_UART_MspInit+0x98>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9a:	f003 0301 	and.w	r3, r3, #1
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000da2:	230c      	movs	r3, #12
 8000da4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da6:	2302      	movs	r3, #2
 8000da8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000daa:	2300      	movs	r3, #0
 8000dac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dae:	2303      	movs	r3, #3
 8000db0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000db2:	2307      	movs	r3, #7
 8000db4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db6:	f107 0314 	add.w	r3, r7, #20
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4809      	ldr	r0, [pc, #36]	; (8000de4 <HAL_UART_MspInit+0x9c>)
 8000dbe:	f000 fa63 	bl	8001288 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	2026      	movs	r0, #38	; 0x26
 8000dc8:	f000 fa05 	bl	80011d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000dcc:	2026      	movs	r0, #38	; 0x26
 8000dce:	f000 fa1e 	bl	800120e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000dd2:	bf00      	nop
 8000dd4:	3728      	adds	r7, #40	; 0x28
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	40004400 	.word	0x40004400
 8000de0:	40023800 	.word	0x40023800
 8000de4:	40020000 	.word	0x40020000

08000de8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dec:	e7fe      	b.n	8000dec <NMI_Handler+0x4>

08000dee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dee:	b480      	push	{r7}
 8000df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000df2:	e7fe      	b.n	8000df2 <HardFault_Handler+0x4>

08000df4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000df8:	e7fe      	b.n	8000df8 <MemManage_Handler+0x4>

08000dfa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dfe:	e7fe      	b.n	8000dfe <BusFault_Handler+0x4>

08000e00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e04:	e7fe      	b.n	8000e04 <UsageFault_Handler+0x4>

08000e06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e06:	b480      	push	{r7}
 8000e08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr

08000e14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e18:	bf00      	nop
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr

08000e22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e22:	b480      	push	{r7}
 8000e24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e26:	bf00      	nop
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr

08000e30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e34:	f000 f8d4 	bl	8000fe0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e38:	bf00      	nop
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e40:	4802      	ldr	r0, [pc, #8]	; (8000e4c <USART2_IRQHandler+0x10>)
 8000e42:	f001 f999 	bl	8002178 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e46:	bf00      	nop
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	200000f0 	.word	0x200000f0

08000e50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b086      	sub	sp, #24
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e58:	4a14      	ldr	r2, [pc, #80]	; (8000eac <_sbrk+0x5c>)
 8000e5a:	4b15      	ldr	r3, [pc, #84]	; (8000eb0 <_sbrk+0x60>)
 8000e5c:	1ad3      	subs	r3, r2, r3
 8000e5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e64:	4b13      	ldr	r3, [pc, #76]	; (8000eb4 <_sbrk+0x64>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d102      	bne.n	8000e72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e6c:	4b11      	ldr	r3, [pc, #68]	; (8000eb4 <_sbrk+0x64>)
 8000e6e:	4a12      	ldr	r2, [pc, #72]	; (8000eb8 <_sbrk+0x68>)
 8000e70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e72:	4b10      	ldr	r3, [pc, #64]	; (8000eb4 <_sbrk+0x64>)
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4413      	add	r3, r2
 8000e7a:	693a      	ldr	r2, [r7, #16]
 8000e7c:	429a      	cmp	r2, r3
 8000e7e:	d207      	bcs.n	8000e90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e80:	f001 ffa0 	bl	8002dc4 <__errno>
 8000e84:	4603      	mov	r3, r0
 8000e86:	220c      	movs	r2, #12
 8000e88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e8e:	e009      	b.n	8000ea4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e90:	4b08      	ldr	r3, [pc, #32]	; (8000eb4 <_sbrk+0x64>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e96:	4b07      	ldr	r3, [pc, #28]	; (8000eb4 <_sbrk+0x64>)
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4413      	add	r3, r2
 8000e9e:	4a05      	ldr	r2, [pc, #20]	; (8000eb4 <_sbrk+0x64>)
 8000ea0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ea2:	68fb      	ldr	r3, [r7, #12]
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	3718      	adds	r7, #24
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	20020000 	.word	0x20020000
 8000eb0:	00000400 	.word	0x00000400
 8000eb4:	200000e4 	.word	0x200000e4
 8000eb8:	20000148 	.word	0x20000148

08000ebc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ec0:	4b08      	ldr	r3, [pc, #32]	; (8000ee4 <SystemInit+0x28>)
 8000ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ec6:	4a07      	ldr	r2, [pc, #28]	; (8000ee4 <SystemInit+0x28>)
 8000ec8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ecc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ed0:	4b04      	ldr	r3, [pc, #16]	; (8000ee4 <SystemInit+0x28>)
 8000ed2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ed6:	609a      	str	r2, [r3, #8]
#endif
}
 8000ed8:	bf00      	nop
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	e000ed00 	.word	0xe000ed00

08000ee8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ee8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f20 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000eec:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000eee:	e003      	b.n	8000ef8 <LoopCopyDataInit>

08000ef0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000ef0:	4b0c      	ldr	r3, [pc, #48]	; (8000f24 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000ef2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000ef4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000ef6:	3104      	adds	r1, #4

08000ef8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000ef8:	480b      	ldr	r0, [pc, #44]	; (8000f28 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000efa:	4b0c      	ldr	r3, [pc, #48]	; (8000f2c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000efc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000efe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000f00:	d3f6      	bcc.n	8000ef0 <CopyDataInit>
  ldr  r2, =_sbss
 8000f02:	4a0b      	ldr	r2, [pc, #44]	; (8000f30 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000f04:	e002      	b.n	8000f0c <LoopFillZerobss>

08000f06 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000f06:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000f08:	f842 3b04 	str.w	r3, [r2], #4

08000f0c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000f0c:	4b09      	ldr	r3, [pc, #36]	; (8000f34 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000f0e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000f10:	d3f9      	bcc.n	8000f06 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f12:	f7ff ffd3 	bl	8000ebc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f16:	f001 ff5b 	bl	8002dd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f1a:	f7ff fb35 	bl	8000588 <main>
  bx  lr    
 8000f1e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f20:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000f24:	08003850 	.word	0x08003850
  ldr  r0, =_sdata
 8000f28:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000f2c:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 8000f30:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8000f34:	20000144 	.word	0x20000144

08000f38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f38:	e7fe      	b.n	8000f38 <ADC_IRQHandler>
	...

08000f3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f40:	4b0e      	ldr	r3, [pc, #56]	; (8000f7c <HAL_Init+0x40>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a0d      	ldr	r2, [pc, #52]	; (8000f7c <HAL_Init+0x40>)
 8000f46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f4c:	4b0b      	ldr	r3, [pc, #44]	; (8000f7c <HAL_Init+0x40>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a0a      	ldr	r2, [pc, #40]	; (8000f7c <HAL_Init+0x40>)
 8000f52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f58:	4b08      	ldr	r3, [pc, #32]	; (8000f7c <HAL_Init+0x40>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a07      	ldr	r2, [pc, #28]	; (8000f7c <HAL_Init+0x40>)
 8000f5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f64:	2003      	movs	r0, #3
 8000f66:	f000 f92b 	bl	80011c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f6a:	2000      	movs	r0, #0
 8000f6c:	f000 f808 	bl	8000f80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f70:	f7ff fec2 	bl	8000cf8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f74:	2300      	movs	r3, #0
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	40023c00 	.word	0x40023c00

08000f80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f88:	4b12      	ldr	r3, [pc, #72]	; (8000fd4 <HAL_InitTick+0x54>)
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	4b12      	ldr	r3, [pc, #72]	; (8000fd8 <HAL_InitTick+0x58>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	4619      	mov	r1, r3
 8000f92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f96:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f000 f943 	bl	800122a <HAL_SYSTICK_Config>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000faa:	2301      	movs	r3, #1
 8000fac:	e00e      	b.n	8000fcc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2b0f      	cmp	r3, #15
 8000fb2:	d80a      	bhi.n	8000fca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	6879      	ldr	r1, [r7, #4]
 8000fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fbc:	f000 f90b 	bl	80011d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fc0:	4a06      	ldr	r2, [pc, #24]	; (8000fdc <HAL_InitTick+0x5c>)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	e000      	b.n	8000fcc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	20000008 	.word	0x20000008
 8000fd8:	20000010 	.word	0x20000010
 8000fdc:	2000000c 	.word	0x2000000c

08000fe0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fe4:	4b06      	ldr	r3, [pc, #24]	; (8001000 <HAL_IncTick+0x20>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	461a      	mov	r2, r3
 8000fea:	4b06      	ldr	r3, [pc, #24]	; (8001004 <HAL_IncTick+0x24>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4413      	add	r3, r2
 8000ff0:	4a04      	ldr	r2, [pc, #16]	; (8001004 <HAL_IncTick+0x24>)
 8000ff2:	6013      	str	r3, [r2, #0]
}
 8000ff4:	bf00      	nop
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	20000010 	.word	0x20000010
 8001004:	20000130 	.word	0x20000130

08001008 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  return uwTick;
 800100c:	4b03      	ldr	r3, [pc, #12]	; (800101c <HAL_GetTick+0x14>)
 800100e:	681b      	ldr	r3, [r3, #0]
}
 8001010:	4618      	mov	r0, r3
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	20000130 	.word	0x20000130

08001020 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001020:	b480      	push	{r7}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	f003 0307 	and.w	r3, r3, #7
 800102e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001030:	4b0c      	ldr	r3, [pc, #48]	; (8001064 <__NVIC_SetPriorityGrouping+0x44>)
 8001032:	68db      	ldr	r3, [r3, #12]
 8001034:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001036:	68ba      	ldr	r2, [r7, #8]
 8001038:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800103c:	4013      	ands	r3, r2
 800103e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001048:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800104c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001050:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001052:	4a04      	ldr	r2, [pc, #16]	; (8001064 <__NVIC_SetPriorityGrouping+0x44>)
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	60d3      	str	r3, [r2, #12]
}
 8001058:	bf00      	nop
 800105a:	3714      	adds	r7, #20
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr
 8001064:	e000ed00 	.word	0xe000ed00

08001068 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800106c:	4b04      	ldr	r3, [pc, #16]	; (8001080 <__NVIC_GetPriorityGrouping+0x18>)
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	0a1b      	lsrs	r3, r3, #8
 8001072:	f003 0307 	and.w	r3, r3, #7
}
 8001076:	4618      	mov	r0, r3
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	e000ed00 	.word	0xe000ed00

08001084 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	4603      	mov	r3, r0
 800108c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800108e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001092:	2b00      	cmp	r3, #0
 8001094:	db0b      	blt.n	80010ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001096:	79fb      	ldrb	r3, [r7, #7]
 8001098:	f003 021f 	and.w	r2, r3, #31
 800109c:	4907      	ldr	r1, [pc, #28]	; (80010bc <__NVIC_EnableIRQ+0x38>)
 800109e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a2:	095b      	lsrs	r3, r3, #5
 80010a4:	2001      	movs	r0, #1
 80010a6:	fa00 f202 	lsl.w	r2, r0, r2
 80010aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010ae:	bf00      	nop
 80010b0:	370c      	adds	r7, #12
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	e000e100 	.word	0xe000e100

080010c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	4603      	mov	r3, r0
 80010c8:	6039      	str	r1, [r7, #0]
 80010ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	db0a      	blt.n	80010ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	b2da      	uxtb	r2, r3
 80010d8:	490c      	ldr	r1, [pc, #48]	; (800110c <__NVIC_SetPriority+0x4c>)
 80010da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010de:	0112      	lsls	r2, r2, #4
 80010e0:	b2d2      	uxtb	r2, r2
 80010e2:	440b      	add	r3, r1
 80010e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010e8:	e00a      	b.n	8001100 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	b2da      	uxtb	r2, r3
 80010ee:	4908      	ldr	r1, [pc, #32]	; (8001110 <__NVIC_SetPriority+0x50>)
 80010f0:	79fb      	ldrb	r3, [r7, #7]
 80010f2:	f003 030f 	and.w	r3, r3, #15
 80010f6:	3b04      	subs	r3, #4
 80010f8:	0112      	lsls	r2, r2, #4
 80010fa:	b2d2      	uxtb	r2, r2
 80010fc:	440b      	add	r3, r1
 80010fe:	761a      	strb	r2, [r3, #24]
}
 8001100:	bf00      	nop
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr
 800110c:	e000e100 	.word	0xe000e100
 8001110:	e000ed00 	.word	0xe000ed00

08001114 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001114:	b480      	push	{r7}
 8001116:	b089      	sub	sp, #36	; 0x24
 8001118:	af00      	add	r7, sp, #0
 800111a:	60f8      	str	r0, [r7, #12]
 800111c:	60b9      	str	r1, [r7, #8]
 800111e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	f003 0307 	and.w	r3, r3, #7
 8001126:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	f1c3 0307 	rsb	r3, r3, #7
 800112e:	2b04      	cmp	r3, #4
 8001130:	bf28      	it	cs
 8001132:	2304      	movcs	r3, #4
 8001134:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	3304      	adds	r3, #4
 800113a:	2b06      	cmp	r3, #6
 800113c:	d902      	bls.n	8001144 <NVIC_EncodePriority+0x30>
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	3b03      	subs	r3, #3
 8001142:	e000      	b.n	8001146 <NVIC_EncodePriority+0x32>
 8001144:	2300      	movs	r3, #0
 8001146:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001148:	f04f 32ff 	mov.w	r2, #4294967295
 800114c:	69bb      	ldr	r3, [r7, #24]
 800114e:	fa02 f303 	lsl.w	r3, r2, r3
 8001152:	43da      	mvns	r2, r3
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	401a      	ands	r2, r3
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800115c:	f04f 31ff 	mov.w	r1, #4294967295
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	fa01 f303 	lsl.w	r3, r1, r3
 8001166:	43d9      	mvns	r1, r3
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800116c:	4313      	orrs	r3, r2
         );
}
 800116e:	4618      	mov	r0, r3
 8001170:	3724      	adds	r7, #36	; 0x24
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
	...

0800117c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	3b01      	subs	r3, #1
 8001188:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800118c:	d301      	bcc.n	8001192 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800118e:	2301      	movs	r3, #1
 8001190:	e00f      	b.n	80011b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001192:	4a0a      	ldr	r2, [pc, #40]	; (80011bc <SysTick_Config+0x40>)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	3b01      	subs	r3, #1
 8001198:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800119a:	210f      	movs	r1, #15
 800119c:	f04f 30ff 	mov.w	r0, #4294967295
 80011a0:	f7ff ff8e 	bl	80010c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011a4:	4b05      	ldr	r3, [pc, #20]	; (80011bc <SysTick_Config+0x40>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011aa:	4b04      	ldr	r3, [pc, #16]	; (80011bc <SysTick_Config+0x40>)
 80011ac:	2207      	movs	r2, #7
 80011ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011b0:	2300      	movs	r3, #0
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	e000e010 	.word	0xe000e010

080011c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	f7ff ff29 	bl	8001020 <__NVIC_SetPriorityGrouping>
}
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b086      	sub	sp, #24
 80011da:	af00      	add	r7, sp, #0
 80011dc:	4603      	mov	r3, r0
 80011de:	60b9      	str	r1, [r7, #8]
 80011e0:	607a      	str	r2, [r7, #4]
 80011e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011e4:	2300      	movs	r3, #0
 80011e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011e8:	f7ff ff3e 	bl	8001068 <__NVIC_GetPriorityGrouping>
 80011ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011ee:	687a      	ldr	r2, [r7, #4]
 80011f0:	68b9      	ldr	r1, [r7, #8]
 80011f2:	6978      	ldr	r0, [r7, #20]
 80011f4:	f7ff ff8e 	bl	8001114 <NVIC_EncodePriority>
 80011f8:	4602      	mov	r2, r0
 80011fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011fe:	4611      	mov	r1, r2
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff ff5d 	bl	80010c0 <__NVIC_SetPriority>
}
 8001206:	bf00      	nop
 8001208:	3718      	adds	r7, #24
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}

0800120e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800120e:	b580      	push	{r7, lr}
 8001210:	b082      	sub	sp, #8
 8001212:	af00      	add	r7, sp, #0
 8001214:	4603      	mov	r3, r0
 8001216:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001218:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff ff31 	bl	8001084 <__NVIC_EnableIRQ>
}
 8001222:	bf00      	nop
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}

0800122a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800122a:	b580      	push	{r7, lr}
 800122c:	b082      	sub	sp, #8
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f7ff ffa2 	bl	800117c <SysTick_Config>
 8001238:	4603      	mov	r3, r0
}
 800123a:	4618      	mov	r0, r3
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}

08001242 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001242:	b480      	push	{r7}
 8001244:	b083      	sub	sp, #12
 8001246:	af00      	add	r7, sp, #0
 8001248:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001250:	b2db      	uxtb	r3, r3
 8001252:	2b02      	cmp	r3, #2
 8001254:	d004      	beq.n	8001260 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2280      	movs	r2, #128	; 0x80
 800125a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800125c:	2301      	movs	r3, #1
 800125e:	e00c      	b.n	800127a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2205      	movs	r2, #5
 8001264:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f022 0201 	bic.w	r2, r2, #1
 8001276:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001278:	2300      	movs	r3, #0
}
 800127a:	4618      	mov	r0, r3
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
	...

08001288 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001288:	b480      	push	{r7}
 800128a:	b089      	sub	sp, #36	; 0x24
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001292:	2300      	movs	r3, #0
 8001294:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001296:	2300      	movs	r3, #0
 8001298:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800129a:	2300      	movs	r3, #0
 800129c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800129e:	2300      	movs	r3, #0
 80012a0:	61fb      	str	r3, [r7, #28]
 80012a2:	e159      	b.n	8001558 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012a4:	2201      	movs	r2, #1
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	697a      	ldr	r2, [r7, #20]
 80012b4:	4013      	ands	r3, r2
 80012b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012b8:	693a      	ldr	r2, [r7, #16]
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	429a      	cmp	r2, r3
 80012be:	f040 8148 	bne.w	8001552 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d00b      	beq.n	80012e2 <HAL_GPIO_Init+0x5a>
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d007      	beq.n	80012e2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012d6:	2b11      	cmp	r3, #17
 80012d8:	d003      	beq.n	80012e2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	2b12      	cmp	r3, #18
 80012e0:	d130      	bne.n	8001344 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	2203      	movs	r2, #3
 80012ee:	fa02 f303 	lsl.w	r3, r2, r3
 80012f2:	43db      	mvns	r3, r3
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	4013      	ands	r3, r2
 80012f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	68da      	ldr	r2, [r3, #12]
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	fa02 f303 	lsl.w	r3, r2, r3
 8001306:	69ba      	ldr	r2, [r7, #24]
 8001308:	4313      	orrs	r3, r2
 800130a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001318:	2201      	movs	r2, #1
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	fa02 f303 	lsl.w	r3, r2, r3
 8001320:	43db      	mvns	r3, r3
 8001322:	69ba      	ldr	r2, [r7, #24]
 8001324:	4013      	ands	r3, r2
 8001326:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	091b      	lsrs	r3, r3, #4
 800132e:	f003 0201 	and.w	r2, r3, #1
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	4313      	orrs	r3, r2
 800133c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	2203      	movs	r2, #3
 8001350:	fa02 f303 	lsl.w	r3, r2, r3
 8001354:	43db      	mvns	r3, r3
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	4013      	ands	r3, r2
 800135a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	689a      	ldr	r2, [r3, #8]
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	005b      	lsls	r3, r3, #1
 8001364:	fa02 f303 	lsl.w	r3, r2, r3
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	4313      	orrs	r3, r2
 800136c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	2b02      	cmp	r3, #2
 800137a:	d003      	beq.n	8001384 <HAL_GPIO_Init+0xfc>
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	2b12      	cmp	r3, #18
 8001382:	d123      	bne.n	80013cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	08da      	lsrs	r2, r3, #3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	3208      	adds	r2, #8
 800138c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001390:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	f003 0307 	and.w	r3, r3, #7
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	220f      	movs	r2, #15
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	43db      	mvns	r3, r3
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	4013      	ands	r3, r2
 80013a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	691a      	ldr	r2, [r3, #16]
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	f003 0307 	and.w	r3, r3, #7
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	08da      	lsrs	r2, r3, #3
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	3208      	adds	r2, #8
 80013c6:	69b9      	ldr	r1, [r7, #24]
 80013c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	2203      	movs	r2, #3
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	43db      	mvns	r3, r3
 80013de:	69ba      	ldr	r2, [r7, #24]
 80013e0:	4013      	ands	r3, r2
 80013e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f003 0203 	and.w	r2, r3, #3
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	fa02 f303 	lsl.w	r3, r2, r3
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001408:	2b00      	cmp	r3, #0
 800140a:	f000 80a2 	beq.w	8001552 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	60fb      	str	r3, [r7, #12]
 8001412:	4b57      	ldr	r3, [pc, #348]	; (8001570 <HAL_GPIO_Init+0x2e8>)
 8001414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001416:	4a56      	ldr	r2, [pc, #344]	; (8001570 <HAL_GPIO_Init+0x2e8>)
 8001418:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800141c:	6453      	str	r3, [r2, #68]	; 0x44
 800141e:	4b54      	ldr	r3, [pc, #336]	; (8001570 <HAL_GPIO_Init+0x2e8>)
 8001420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001422:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001426:	60fb      	str	r3, [r7, #12]
 8001428:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800142a:	4a52      	ldr	r2, [pc, #328]	; (8001574 <HAL_GPIO_Init+0x2ec>)
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	089b      	lsrs	r3, r3, #2
 8001430:	3302      	adds	r3, #2
 8001432:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001436:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	f003 0303 	and.w	r3, r3, #3
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	220f      	movs	r2, #15
 8001442:	fa02 f303 	lsl.w	r3, r2, r3
 8001446:	43db      	mvns	r3, r3
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	4013      	ands	r3, r2
 800144c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4a49      	ldr	r2, [pc, #292]	; (8001578 <HAL_GPIO_Init+0x2f0>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d019      	beq.n	800148a <HAL_GPIO_Init+0x202>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4a48      	ldr	r2, [pc, #288]	; (800157c <HAL_GPIO_Init+0x2f4>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d013      	beq.n	8001486 <HAL_GPIO_Init+0x1fe>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4a47      	ldr	r2, [pc, #284]	; (8001580 <HAL_GPIO_Init+0x2f8>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d00d      	beq.n	8001482 <HAL_GPIO_Init+0x1fa>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4a46      	ldr	r2, [pc, #280]	; (8001584 <HAL_GPIO_Init+0x2fc>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d007      	beq.n	800147e <HAL_GPIO_Init+0x1f6>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4a45      	ldr	r2, [pc, #276]	; (8001588 <HAL_GPIO_Init+0x300>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d101      	bne.n	800147a <HAL_GPIO_Init+0x1f2>
 8001476:	2304      	movs	r3, #4
 8001478:	e008      	b.n	800148c <HAL_GPIO_Init+0x204>
 800147a:	2307      	movs	r3, #7
 800147c:	e006      	b.n	800148c <HAL_GPIO_Init+0x204>
 800147e:	2303      	movs	r3, #3
 8001480:	e004      	b.n	800148c <HAL_GPIO_Init+0x204>
 8001482:	2302      	movs	r3, #2
 8001484:	e002      	b.n	800148c <HAL_GPIO_Init+0x204>
 8001486:	2301      	movs	r3, #1
 8001488:	e000      	b.n	800148c <HAL_GPIO_Init+0x204>
 800148a:	2300      	movs	r3, #0
 800148c:	69fa      	ldr	r2, [r7, #28]
 800148e:	f002 0203 	and.w	r2, r2, #3
 8001492:	0092      	lsls	r2, r2, #2
 8001494:	4093      	lsls	r3, r2
 8001496:	69ba      	ldr	r2, [r7, #24]
 8001498:	4313      	orrs	r3, r2
 800149a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800149c:	4935      	ldr	r1, [pc, #212]	; (8001574 <HAL_GPIO_Init+0x2ec>)
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	089b      	lsrs	r3, r3, #2
 80014a2:	3302      	adds	r3, #2
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014aa:	4b38      	ldr	r3, [pc, #224]	; (800158c <HAL_GPIO_Init+0x304>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	43db      	mvns	r3, r3
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	4013      	ands	r3, r2
 80014b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d003      	beq.n	80014ce <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80014c6:	69ba      	ldr	r2, [r7, #24]
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014ce:	4a2f      	ldr	r2, [pc, #188]	; (800158c <HAL_GPIO_Init+0x304>)
 80014d0:	69bb      	ldr	r3, [r7, #24]
 80014d2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80014d4:	4b2d      	ldr	r3, [pc, #180]	; (800158c <HAL_GPIO_Init+0x304>)
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	43db      	mvns	r3, r3
 80014de:	69ba      	ldr	r2, [r7, #24]
 80014e0:	4013      	ands	r3, r2
 80014e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d003      	beq.n	80014f8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014f8:	4a24      	ldr	r2, [pc, #144]	; (800158c <HAL_GPIO_Init+0x304>)
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014fe:	4b23      	ldr	r3, [pc, #140]	; (800158c <HAL_GPIO_Init+0x304>)
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	43db      	mvns	r3, r3
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	4013      	ands	r3, r2
 800150c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001516:	2b00      	cmp	r3, #0
 8001518:	d003      	beq.n	8001522 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800151a:	69ba      	ldr	r2, [r7, #24]
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	4313      	orrs	r3, r2
 8001520:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001522:	4a1a      	ldr	r2, [pc, #104]	; (800158c <HAL_GPIO_Init+0x304>)
 8001524:	69bb      	ldr	r3, [r7, #24]
 8001526:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001528:	4b18      	ldr	r3, [pc, #96]	; (800158c <HAL_GPIO_Init+0x304>)
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	43db      	mvns	r3, r3
 8001532:	69ba      	ldr	r2, [r7, #24]
 8001534:	4013      	ands	r3, r2
 8001536:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001540:	2b00      	cmp	r3, #0
 8001542:	d003      	beq.n	800154c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001544:	69ba      	ldr	r2, [r7, #24]
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	4313      	orrs	r3, r2
 800154a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800154c:	4a0f      	ldr	r2, [pc, #60]	; (800158c <HAL_GPIO_Init+0x304>)
 800154e:	69bb      	ldr	r3, [r7, #24]
 8001550:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	3301      	adds	r3, #1
 8001556:	61fb      	str	r3, [r7, #28]
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	2b0f      	cmp	r3, #15
 800155c:	f67f aea2 	bls.w	80012a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001560:	bf00      	nop
 8001562:	bf00      	nop
 8001564:	3724      	adds	r7, #36	; 0x24
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	40023800 	.word	0x40023800
 8001574:	40013800 	.word	0x40013800
 8001578:	40020000 	.word	0x40020000
 800157c:	40020400 	.word	0x40020400
 8001580:	40020800 	.word	0x40020800
 8001584:	40020c00 	.word	0x40020c00
 8001588:	40021000 	.word	0x40021000
 800158c:	40013c00 	.word	0x40013c00

08001590 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001590:	b480      	push	{r7}
 8001592:	b085      	sub	sp, #20
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	460b      	mov	r3, r1
 800159a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	691a      	ldr	r2, [r3, #16]
 80015a0:	887b      	ldrh	r3, [r7, #2]
 80015a2:	4013      	ands	r3, r2
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d002      	beq.n	80015ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80015a8:	2301      	movs	r3, #1
 80015aa:	73fb      	strb	r3, [r7, #15]
 80015ac:	e001      	b.n	80015b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80015ae:	2300      	movs	r3, #0
 80015b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80015b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3714      	adds	r7, #20
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr

080015c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	460b      	mov	r3, r1
 80015ca:	807b      	strh	r3, [r7, #2]
 80015cc:	4613      	mov	r3, r2
 80015ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015d0:	787b      	ldrb	r3, [r7, #1]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d003      	beq.n	80015de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015d6:	887a      	ldrh	r2, [r7, #2]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015dc:	e003      	b.n	80015e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015de:	887b      	ldrh	r3, [r7, #2]
 80015e0:	041a      	lsls	r2, r3, #16
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	619a      	str	r2, [r3, #24]
}
 80015e6:	bf00      	nop
 80015e8:	370c      	adds	r7, #12
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr

080015f2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015f2:	b480      	push	{r7}
 80015f4:	b083      	sub	sp, #12
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	6078      	str	r0, [r7, #4]
 80015fa:	460b      	mov	r3, r1
 80015fc:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	695a      	ldr	r2, [r3, #20]
 8001602:	887b      	ldrh	r3, [r7, #2]
 8001604:	401a      	ands	r2, r3
 8001606:	887b      	ldrh	r3, [r7, #2]
 8001608:	429a      	cmp	r2, r3
 800160a:	d104      	bne.n	8001616 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800160c:	887b      	ldrh	r3, [r7, #2]
 800160e:	041a      	lsls	r2, r3, #16
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001614:	e002      	b.n	800161c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001616:	887a      	ldrh	r2, [r7, #2]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	619a      	str	r2, [r3, #24]
}
 800161c:	bf00      	nop
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b086      	sub	sp, #24
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d101      	bne.n	800163a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e25b      	b.n	8001af2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	2b00      	cmp	r3, #0
 8001644:	d075      	beq.n	8001732 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001646:	4ba3      	ldr	r3, [pc, #652]	; (80018d4 <HAL_RCC_OscConfig+0x2ac>)
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	f003 030c 	and.w	r3, r3, #12
 800164e:	2b04      	cmp	r3, #4
 8001650:	d00c      	beq.n	800166c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001652:	4ba0      	ldr	r3, [pc, #640]	; (80018d4 <HAL_RCC_OscConfig+0x2ac>)
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800165a:	2b08      	cmp	r3, #8
 800165c:	d112      	bne.n	8001684 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800165e:	4b9d      	ldr	r3, [pc, #628]	; (80018d4 <HAL_RCC_OscConfig+0x2ac>)
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001666:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800166a:	d10b      	bne.n	8001684 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800166c:	4b99      	ldr	r3, [pc, #612]	; (80018d4 <HAL_RCC_OscConfig+0x2ac>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001674:	2b00      	cmp	r3, #0
 8001676:	d05b      	beq.n	8001730 <HAL_RCC_OscConfig+0x108>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d157      	bne.n	8001730 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	e236      	b.n	8001af2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800168c:	d106      	bne.n	800169c <HAL_RCC_OscConfig+0x74>
 800168e:	4b91      	ldr	r3, [pc, #580]	; (80018d4 <HAL_RCC_OscConfig+0x2ac>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a90      	ldr	r2, [pc, #576]	; (80018d4 <HAL_RCC_OscConfig+0x2ac>)
 8001694:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001698:	6013      	str	r3, [r2, #0]
 800169a:	e01d      	b.n	80016d8 <HAL_RCC_OscConfig+0xb0>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016a4:	d10c      	bne.n	80016c0 <HAL_RCC_OscConfig+0x98>
 80016a6:	4b8b      	ldr	r3, [pc, #556]	; (80018d4 <HAL_RCC_OscConfig+0x2ac>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a8a      	ldr	r2, [pc, #552]	; (80018d4 <HAL_RCC_OscConfig+0x2ac>)
 80016ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016b0:	6013      	str	r3, [r2, #0]
 80016b2:	4b88      	ldr	r3, [pc, #544]	; (80018d4 <HAL_RCC_OscConfig+0x2ac>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a87      	ldr	r2, [pc, #540]	; (80018d4 <HAL_RCC_OscConfig+0x2ac>)
 80016b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016bc:	6013      	str	r3, [r2, #0]
 80016be:	e00b      	b.n	80016d8 <HAL_RCC_OscConfig+0xb0>
 80016c0:	4b84      	ldr	r3, [pc, #528]	; (80018d4 <HAL_RCC_OscConfig+0x2ac>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a83      	ldr	r2, [pc, #524]	; (80018d4 <HAL_RCC_OscConfig+0x2ac>)
 80016c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016ca:	6013      	str	r3, [r2, #0]
 80016cc:	4b81      	ldr	r3, [pc, #516]	; (80018d4 <HAL_RCC_OscConfig+0x2ac>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a80      	ldr	r2, [pc, #512]	; (80018d4 <HAL_RCC_OscConfig+0x2ac>)
 80016d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d013      	beq.n	8001708 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e0:	f7ff fc92 	bl	8001008 <HAL_GetTick>
 80016e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016e6:	e008      	b.n	80016fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016e8:	f7ff fc8e 	bl	8001008 <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	2b64      	cmp	r3, #100	; 0x64
 80016f4:	d901      	bls.n	80016fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e1fb      	b.n	8001af2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016fa:	4b76      	ldr	r3, [pc, #472]	; (80018d4 <HAL_RCC_OscConfig+0x2ac>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d0f0      	beq.n	80016e8 <HAL_RCC_OscConfig+0xc0>
 8001706:	e014      	b.n	8001732 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001708:	f7ff fc7e 	bl	8001008 <HAL_GetTick>
 800170c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800170e:	e008      	b.n	8001722 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001710:	f7ff fc7a 	bl	8001008 <HAL_GetTick>
 8001714:	4602      	mov	r2, r0
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	2b64      	cmp	r3, #100	; 0x64
 800171c:	d901      	bls.n	8001722 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800171e:	2303      	movs	r3, #3
 8001720:	e1e7      	b.n	8001af2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001722:	4b6c      	ldr	r3, [pc, #432]	; (80018d4 <HAL_RCC_OscConfig+0x2ac>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d1f0      	bne.n	8001710 <HAL_RCC_OscConfig+0xe8>
 800172e:	e000      	b.n	8001732 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001730:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0302 	and.w	r3, r3, #2
 800173a:	2b00      	cmp	r3, #0
 800173c:	d063      	beq.n	8001806 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800173e:	4b65      	ldr	r3, [pc, #404]	; (80018d4 <HAL_RCC_OscConfig+0x2ac>)
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	f003 030c 	and.w	r3, r3, #12
 8001746:	2b00      	cmp	r3, #0
 8001748:	d00b      	beq.n	8001762 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800174a:	4b62      	ldr	r3, [pc, #392]	; (80018d4 <HAL_RCC_OscConfig+0x2ac>)
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001752:	2b08      	cmp	r3, #8
 8001754:	d11c      	bne.n	8001790 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001756:	4b5f      	ldr	r3, [pc, #380]	; (80018d4 <HAL_RCC_OscConfig+0x2ac>)
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800175e:	2b00      	cmp	r3, #0
 8001760:	d116      	bne.n	8001790 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001762:	4b5c      	ldr	r3, [pc, #368]	; (80018d4 <HAL_RCC_OscConfig+0x2ac>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 0302 	and.w	r3, r3, #2
 800176a:	2b00      	cmp	r3, #0
 800176c:	d005      	beq.n	800177a <HAL_RCC_OscConfig+0x152>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	68db      	ldr	r3, [r3, #12]
 8001772:	2b01      	cmp	r3, #1
 8001774:	d001      	beq.n	800177a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e1bb      	b.n	8001af2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800177a:	4b56      	ldr	r3, [pc, #344]	; (80018d4 <HAL_RCC_OscConfig+0x2ac>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	691b      	ldr	r3, [r3, #16]
 8001786:	00db      	lsls	r3, r3, #3
 8001788:	4952      	ldr	r1, [pc, #328]	; (80018d4 <HAL_RCC_OscConfig+0x2ac>)
 800178a:	4313      	orrs	r3, r2
 800178c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800178e:	e03a      	b.n	8001806 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d020      	beq.n	80017da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001798:	4b4f      	ldr	r3, [pc, #316]	; (80018d8 <HAL_RCC_OscConfig+0x2b0>)
 800179a:	2201      	movs	r2, #1
 800179c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800179e:	f7ff fc33 	bl	8001008 <HAL_GetTick>
 80017a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017a4:	e008      	b.n	80017b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017a6:	f7ff fc2f 	bl	8001008 <HAL_GetTick>
 80017aa:	4602      	mov	r2, r0
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d901      	bls.n	80017b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80017b4:	2303      	movs	r3, #3
 80017b6:	e19c      	b.n	8001af2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017b8:	4b46      	ldr	r3, [pc, #280]	; (80018d4 <HAL_RCC_OscConfig+0x2ac>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 0302 	and.w	r3, r3, #2
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d0f0      	beq.n	80017a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017c4:	4b43      	ldr	r3, [pc, #268]	; (80018d4 <HAL_RCC_OscConfig+0x2ac>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	691b      	ldr	r3, [r3, #16]
 80017d0:	00db      	lsls	r3, r3, #3
 80017d2:	4940      	ldr	r1, [pc, #256]	; (80018d4 <HAL_RCC_OscConfig+0x2ac>)
 80017d4:	4313      	orrs	r3, r2
 80017d6:	600b      	str	r3, [r1, #0]
 80017d8:	e015      	b.n	8001806 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017da:	4b3f      	ldr	r3, [pc, #252]	; (80018d8 <HAL_RCC_OscConfig+0x2b0>)
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e0:	f7ff fc12 	bl	8001008 <HAL_GetTick>
 80017e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017e6:	e008      	b.n	80017fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017e8:	f7ff fc0e 	bl	8001008 <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d901      	bls.n	80017fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e17b      	b.n	8001af2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017fa:	4b36      	ldr	r3, [pc, #216]	; (80018d4 <HAL_RCC_OscConfig+0x2ac>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 0302 	and.w	r3, r3, #2
 8001802:	2b00      	cmp	r3, #0
 8001804:	d1f0      	bne.n	80017e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0308 	and.w	r3, r3, #8
 800180e:	2b00      	cmp	r3, #0
 8001810:	d030      	beq.n	8001874 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	695b      	ldr	r3, [r3, #20]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d016      	beq.n	8001848 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800181a:	4b30      	ldr	r3, [pc, #192]	; (80018dc <HAL_RCC_OscConfig+0x2b4>)
 800181c:	2201      	movs	r2, #1
 800181e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001820:	f7ff fbf2 	bl	8001008 <HAL_GetTick>
 8001824:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001826:	e008      	b.n	800183a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001828:	f7ff fbee 	bl	8001008 <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	2b02      	cmp	r3, #2
 8001834:	d901      	bls.n	800183a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e15b      	b.n	8001af2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800183a:	4b26      	ldr	r3, [pc, #152]	; (80018d4 <HAL_RCC_OscConfig+0x2ac>)
 800183c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800183e:	f003 0302 	and.w	r3, r3, #2
 8001842:	2b00      	cmp	r3, #0
 8001844:	d0f0      	beq.n	8001828 <HAL_RCC_OscConfig+0x200>
 8001846:	e015      	b.n	8001874 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001848:	4b24      	ldr	r3, [pc, #144]	; (80018dc <HAL_RCC_OscConfig+0x2b4>)
 800184a:	2200      	movs	r2, #0
 800184c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800184e:	f7ff fbdb 	bl	8001008 <HAL_GetTick>
 8001852:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001854:	e008      	b.n	8001868 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001856:	f7ff fbd7 	bl	8001008 <HAL_GetTick>
 800185a:	4602      	mov	r2, r0
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	2b02      	cmp	r3, #2
 8001862:	d901      	bls.n	8001868 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001864:	2303      	movs	r3, #3
 8001866:	e144      	b.n	8001af2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001868:	4b1a      	ldr	r3, [pc, #104]	; (80018d4 <HAL_RCC_OscConfig+0x2ac>)
 800186a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800186c:	f003 0302 	and.w	r3, r3, #2
 8001870:	2b00      	cmp	r3, #0
 8001872:	d1f0      	bne.n	8001856 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 0304 	and.w	r3, r3, #4
 800187c:	2b00      	cmp	r3, #0
 800187e:	f000 80a0 	beq.w	80019c2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001882:	2300      	movs	r3, #0
 8001884:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001886:	4b13      	ldr	r3, [pc, #76]	; (80018d4 <HAL_RCC_OscConfig+0x2ac>)
 8001888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d10f      	bne.n	80018b2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001892:	2300      	movs	r3, #0
 8001894:	60bb      	str	r3, [r7, #8]
 8001896:	4b0f      	ldr	r3, [pc, #60]	; (80018d4 <HAL_RCC_OscConfig+0x2ac>)
 8001898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189a:	4a0e      	ldr	r2, [pc, #56]	; (80018d4 <HAL_RCC_OscConfig+0x2ac>)
 800189c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018a0:	6413      	str	r3, [r2, #64]	; 0x40
 80018a2:	4b0c      	ldr	r3, [pc, #48]	; (80018d4 <HAL_RCC_OscConfig+0x2ac>)
 80018a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018aa:	60bb      	str	r3, [r7, #8]
 80018ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018ae:	2301      	movs	r3, #1
 80018b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018b2:	4b0b      	ldr	r3, [pc, #44]	; (80018e0 <HAL_RCC_OscConfig+0x2b8>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d121      	bne.n	8001902 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018be:	4b08      	ldr	r3, [pc, #32]	; (80018e0 <HAL_RCC_OscConfig+0x2b8>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a07      	ldr	r2, [pc, #28]	; (80018e0 <HAL_RCC_OscConfig+0x2b8>)
 80018c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018ca:	f7ff fb9d 	bl	8001008 <HAL_GetTick>
 80018ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018d0:	e011      	b.n	80018f6 <HAL_RCC_OscConfig+0x2ce>
 80018d2:	bf00      	nop
 80018d4:	40023800 	.word	0x40023800
 80018d8:	42470000 	.word	0x42470000
 80018dc:	42470e80 	.word	0x42470e80
 80018e0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018e4:	f7ff fb90 	bl	8001008 <HAL_GetTick>
 80018e8:	4602      	mov	r2, r0
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d901      	bls.n	80018f6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e0fd      	b.n	8001af2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018f6:	4b81      	ldr	r3, [pc, #516]	; (8001afc <HAL_RCC_OscConfig+0x4d4>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d0f0      	beq.n	80018e4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	2b01      	cmp	r3, #1
 8001908:	d106      	bne.n	8001918 <HAL_RCC_OscConfig+0x2f0>
 800190a:	4b7d      	ldr	r3, [pc, #500]	; (8001b00 <HAL_RCC_OscConfig+0x4d8>)
 800190c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800190e:	4a7c      	ldr	r2, [pc, #496]	; (8001b00 <HAL_RCC_OscConfig+0x4d8>)
 8001910:	f043 0301 	orr.w	r3, r3, #1
 8001914:	6713      	str	r3, [r2, #112]	; 0x70
 8001916:	e01c      	b.n	8001952 <HAL_RCC_OscConfig+0x32a>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	2b05      	cmp	r3, #5
 800191e:	d10c      	bne.n	800193a <HAL_RCC_OscConfig+0x312>
 8001920:	4b77      	ldr	r3, [pc, #476]	; (8001b00 <HAL_RCC_OscConfig+0x4d8>)
 8001922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001924:	4a76      	ldr	r2, [pc, #472]	; (8001b00 <HAL_RCC_OscConfig+0x4d8>)
 8001926:	f043 0304 	orr.w	r3, r3, #4
 800192a:	6713      	str	r3, [r2, #112]	; 0x70
 800192c:	4b74      	ldr	r3, [pc, #464]	; (8001b00 <HAL_RCC_OscConfig+0x4d8>)
 800192e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001930:	4a73      	ldr	r2, [pc, #460]	; (8001b00 <HAL_RCC_OscConfig+0x4d8>)
 8001932:	f043 0301 	orr.w	r3, r3, #1
 8001936:	6713      	str	r3, [r2, #112]	; 0x70
 8001938:	e00b      	b.n	8001952 <HAL_RCC_OscConfig+0x32a>
 800193a:	4b71      	ldr	r3, [pc, #452]	; (8001b00 <HAL_RCC_OscConfig+0x4d8>)
 800193c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800193e:	4a70      	ldr	r2, [pc, #448]	; (8001b00 <HAL_RCC_OscConfig+0x4d8>)
 8001940:	f023 0301 	bic.w	r3, r3, #1
 8001944:	6713      	str	r3, [r2, #112]	; 0x70
 8001946:	4b6e      	ldr	r3, [pc, #440]	; (8001b00 <HAL_RCC_OscConfig+0x4d8>)
 8001948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800194a:	4a6d      	ldr	r2, [pc, #436]	; (8001b00 <HAL_RCC_OscConfig+0x4d8>)
 800194c:	f023 0304 	bic.w	r3, r3, #4
 8001950:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d015      	beq.n	8001986 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800195a:	f7ff fb55 	bl	8001008 <HAL_GetTick>
 800195e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001960:	e00a      	b.n	8001978 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001962:	f7ff fb51 	bl	8001008 <HAL_GetTick>
 8001966:	4602      	mov	r2, r0
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001970:	4293      	cmp	r3, r2
 8001972:	d901      	bls.n	8001978 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001974:	2303      	movs	r3, #3
 8001976:	e0bc      	b.n	8001af2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001978:	4b61      	ldr	r3, [pc, #388]	; (8001b00 <HAL_RCC_OscConfig+0x4d8>)
 800197a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800197c:	f003 0302 	and.w	r3, r3, #2
 8001980:	2b00      	cmp	r3, #0
 8001982:	d0ee      	beq.n	8001962 <HAL_RCC_OscConfig+0x33a>
 8001984:	e014      	b.n	80019b0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001986:	f7ff fb3f 	bl	8001008 <HAL_GetTick>
 800198a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800198c:	e00a      	b.n	80019a4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800198e:	f7ff fb3b 	bl	8001008 <HAL_GetTick>
 8001992:	4602      	mov	r2, r0
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	f241 3288 	movw	r2, #5000	; 0x1388
 800199c:	4293      	cmp	r3, r2
 800199e:	d901      	bls.n	80019a4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80019a0:	2303      	movs	r3, #3
 80019a2:	e0a6      	b.n	8001af2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019a4:	4b56      	ldr	r3, [pc, #344]	; (8001b00 <HAL_RCC_OscConfig+0x4d8>)
 80019a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019a8:	f003 0302 	and.w	r3, r3, #2
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d1ee      	bne.n	800198e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80019b0:	7dfb      	ldrb	r3, [r7, #23]
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d105      	bne.n	80019c2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019b6:	4b52      	ldr	r3, [pc, #328]	; (8001b00 <HAL_RCC_OscConfig+0x4d8>)
 80019b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ba:	4a51      	ldr	r2, [pc, #324]	; (8001b00 <HAL_RCC_OscConfig+0x4d8>)
 80019bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019c0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	699b      	ldr	r3, [r3, #24]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	f000 8092 	beq.w	8001af0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80019cc:	4b4c      	ldr	r3, [pc, #304]	; (8001b00 <HAL_RCC_OscConfig+0x4d8>)
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	f003 030c 	and.w	r3, r3, #12
 80019d4:	2b08      	cmp	r3, #8
 80019d6:	d05c      	beq.n	8001a92 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	699b      	ldr	r3, [r3, #24]
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d141      	bne.n	8001a64 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019e0:	4b48      	ldr	r3, [pc, #288]	; (8001b04 <HAL_RCC_OscConfig+0x4dc>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e6:	f7ff fb0f 	bl	8001008 <HAL_GetTick>
 80019ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019ec:	e008      	b.n	8001a00 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019ee:	f7ff fb0b 	bl	8001008 <HAL_GetTick>
 80019f2:	4602      	mov	r2, r0
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d901      	bls.n	8001a00 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80019fc:	2303      	movs	r3, #3
 80019fe:	e078      	b.n	8001af2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a00:	4b3f      	ldr	r3, [pc, #252]	; (8001b00 <HAL_RCC_OscConfig+0x4d8>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d1f0      	bne.n	80019ee <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	69da      	ldr	r2, [r3, #28]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6a1b      	ldr	r3, [r3, #32]
 8001a14:	431a      	orrs	r2, r3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a1a:	019b      	lsls	r3, r3, #6
 8001a1c:	431a      	orrs	r2, r3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a22:	085b      	lsrs	r3, r3, #1
 8001a24:	3b01      	subs	r3, #1
 8001a26:	041b      	lsls	r3, r3, #16
 8001a28:	431a      	orrs	r2, r3
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a2e:	061b      	lsls	r3, r3, #24
 8001a30:	4933      	ldr	r1, [pc, #204]	; (8001b00 <HAL_RCC_OscConfig+0x4d8>)
 8001a32:	4313      	orrs	r3, r2
 8001a34:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a36:	4b33      	ldr	r3, [pc, #204]	; (8001b04 <HAL_RCC_OscConfig+0x4dc>)
 8001a38:	2201      	movs	r2, #1
 8001a3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a3c:	f7ff fae4 	bl	8001008 <HAL_GetTick>
 8001a40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a42:	e008      	b.n	8001a56 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a44:	f7ff fae0 	bl	8001008 <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e04d      	b.n	8001af2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a56:	4b2a      	ldr	r3, [pc, #168]	; (8001b00 <HAL_RCC_OscConfig+0x4d8>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d0f0      	beq.n	8001a44 <HAL_RCC_OscConfig+0x41c>
 8001a62:	e045      	b.n	8001af0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a64:	4b27      	ldr	r3, [pc, #156]	; (8001b04 <HAL_RCC_OscConfig+0x4dc>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a6a:	f7ff facd 	bl	8001008 <HAL_GetTick>
 8001a6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a70:	e008      	b.n	8001a84 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a72:	f7ff fac9 	bl	8001008 <HAL_GetTick>
 8001a76:	4602      	mov	r2, r0
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d901      	bls.n	8001a84 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001a80:	2303      	movs	r3, #3
 8001a82:	e036      	b.n	8001af2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a84:	4b1e      	ldr	r3, [pc, #120]	; (8001b00 <HAL_RCC_OscConfig+0x4d8>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d1f0      	bne.n	8001a72 <HAL_RCC_OscConfig+0x44a>
 8001a90:	e02e      	b.n	8001af0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	699b      	ldr	r3, [r3, #24]
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d101      	bne.n	8001a9e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e029      	b.n	8001af2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a9e:	4b18      	ldr	r3, [pc, #96]	; (8001b00 <HAL_RCC_OscConfig+0x4d8>)
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	69db      	ldr	r3, [r3, #28]
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d11c      	bne.n	8001aec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d115      	bne.n	8001aec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001ac0:	68fa      	ldr	r2, [r7, #12]
 8001ac2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d10d      	bne.n	8001aec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d106      	bne.n	8001aec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d001      	beq.n	8001af0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e000      	b.n	8001af2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001af0:	2300      	movs	r3, #0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3718      	adds	r7, #24
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40007000 	.word	0x40007000
 8001b00:	40023800 	.word	0x40023800
 8001b04:	42470060 	.word	0x42470060

08001b08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d101      	bne.n	8001b1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e0cc      	b.n	8001cb6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b1c:	4b68      	ldr	r3, [pc, #416]	; (8001cc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 030f 	and.w	r3, r3, #15
 8001b24:	683a      	ldr	r2, [r7, #0]
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d90c      	bls.n	8001b44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b2a:	4b65      	ldr	r3, [pc, #404]	; (8001cc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b2c:	683a      	ldr	r2, [r7, #0]
 8001b2e:	b2d2      	uxtb	r2, r2
 8001b30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b32:	4b63      	ldr	r3, [pc, #396]	; (8001cc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 030f 	and.w	r3, r3, #15
 8001b3a:	683a      	ldr	r2, [r7, #0]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d001      	beq.n	8001b44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e0b8      	b.n	8001cb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 0302 	and.w	r3, r3, #2
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d020      	beq.n	8001b92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0304 	and.w	r3, r3, #4
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d005      	beq.n	8001b68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b5c:	4b59      	ldr	r3, [pc, #356]	; (8001cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	4a58      	ldr	r2, [pc, #352]	; (8001cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b62:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b66:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 0308 	and.w	r3, r3, #8
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d005      	beq.n	8001b80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b74:	4b53      	ldr	r3, [pc, #332]	; (8001cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	4a52      	ldr	r2, [pc, #328]	; (8001cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b7a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b80:	4b50      	ldr	r3, [pc, #320]	; (8001cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	494d      	ldr	r1, [pc, #308]	; (8001cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0301 	and.w	r3, r3, #1
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d044      	beq.n	8001c28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d107      	bne.n	8001bb6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ba6:	4b47      	ldr	r3, [pc, #284]	; (8001cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d119      	bne.n	8001be6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e07f      	b.n	8001cb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d003      	beq.n	8001bc6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bc2:	2b03      	cmp	r3, #3
 8001bc4:	d107      	bne.n	8001bd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bc6:	4b3f      	ldr	r3, [pc, #252]	; (8001cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d109      	bne.n	8001be6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e06f      	b.n	8001cb6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bd6:	4b3b      	ldr	r3, [pc, #236]	; (8001cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0302 	and.w	r3, r3, #2
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d101      	bne.n	8001be6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e067      	b.n	8001cb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001be6:	4b37      	ldr	r3, [pc, #220]	; (8001cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	f023 0203 	bic.w	r2, r3, #3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	4934      	ldr	r1, [pc, #208]	; (8001cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bf8:	f7ff fa06 	bl	8001008 <HAL_GetTick>
 8001bfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bfe:	e00a      	b.n	8001c16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c00:	f7ff fa02 	bl	8001008 <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d901      	bls.n	8001c16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e04f      	b.n	8001cb6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c16:	4b2b      	ldr	r3, [pc, #172]	; (8001cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	f003 020c 	and.w	r2, r3, #12
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d1eb      	bne.n	8001c00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c28:	4b25      	ldr	r3, [pc, #148]	; (8001cc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 030f 	and.w	r3, r3, #15
 8001c30:	683a      	ldr	r2, [r7, #0]
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d20c      	bcs.n	8001c50 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c36:	4b22      	ldr	r3, [pc, #136]	; (8001cc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c38:	683a      	ldr	r2, [r7, #0]
 8001c3a:	b2d2      	uxtb	r2, r2
 8001c3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c3e:	4b20      	ldr	r3, [pc, #128]	; (8001cc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 030f 	and.w	r3, r3, #15
 8001c46:	683a      	ldr	r2, [r7, #0]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d001      	beq.n	8001c50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e032      	b.n	8001cb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0304 	and.w	r3, r3, #4
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d008      	beq.n	8001c6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c5c:	4b19      	ldr	r3, [pc, #100]	; (8001cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	4916      	ldr	r1, [pc, #88]	; (8001cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 0308 	and.w	r3, r3, #8
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d009      	beq.n	8001c8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c7a:	4b12      	ldr	r3, [pc, #72]	; (8001cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	691b      	ldr	r3, [r3, #16]
 8001c86:	00db      	lsls	r3, r3, #3
 8001c88:	490e      	ldr	r1, [pc, #56]	; (8001cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c8e:	f000 f821 	bl	8001cd4 <HAL_RCC_GetSysClockFreq>
 8001c92:	4602      	mov	r2, r0
 8001c94:	4b0b      	ldr	r3, [pc, #44]	; (8001cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	091b      	lsrs	r3, r3, #4
 8001c9a:	f003 030f 	and.w	r3, r3, #15
 8001c9e:	490a      	ldr	r1, [pc, #40]	; (8001cc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001ca0:	5ccb      	ldrb	r3, [r1, r3]
 8001ca2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ca6:	4a09      	ldr	r2, [pc, #36]	; (8001ccc <HAL_RCC_ClockConfig+0x1c4>)
 8001ca8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001caa:	4b09      	ldr	r3, [pc, #36]	; (8001cd0 <HAL_RCC_ClockConfig+0x1c8>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7ff f966 	bl	8000f80 <HAL_InitTick>

  return HAL_OK;
 8001cb4:	2300      	movs	r3, #0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3710      	adds	r7, #16
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	40023c00 	.word	0x40023c00
 8001cc4:	40023800 	.word	0x40023800
 8001cc8:	080037f4 	.word	0x080037f4
 8001ccc:	20000008 	.word	0x20000008
 8001cd0:	2000000c 	.word	0x2000000c

08001cd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cd4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001cd8:	b084      	sub	sp, #16
 8001cda:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	607b      	str	r3, [r7, #4]
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	60fb      	str	r3, [r7, #12]
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001cec:	4b67      	ldr	r3, [pc, #412]	; (8001e8c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	f003 030c 	and.w	r3, r3, #12
 8001cf4:	2b08      	cmp	r3, #8
 8001cf6:	d00d      	beq.n	8001d14 <HAL_RCC_GetSysClockFreq+0x40>
 8001cf8:	2b08      	cmp	r3, #8
 8001cfa:	f200 80bd 	bhi.w	8001e78 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d002      	beq.n	8001d08 <HAL_RCC_GetSysClockFreq+0x34>
 8001d02:	2b04      	cmp	r3, #4
 8001d04:	d003      	beq.n	8001d0e <HAL_RCC_GetSysClockFreq+0x3a>
 8001d06:	e0b7      	b.n	8001e78 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d08:	4b61      	ldr	r3, [pc, #388]	; (8001e90 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001d0a:	60bb      	str	r3, [r7, #8]
       break;
 8001d0c:	e0b7      	b.n	8001e7e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d0e:	4b61      	ldr	r3, [pc, #388]	; (8001e94 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001d10:	60bb      	str	r3, [r7, #8]
      break;
 8001d12:	e0b4      	b.n	8001e7e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d14:	4b5d      	ldr	r3, [pc, #372]	; (8001e8c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d1c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d1e:	4b5b      	ldr	r3, [pc, #364]	; (8001e8c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d04d      	beq.n	8001dc6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d2a:	4b58      	ldr	r3, [pc, #352]	; (8001e8c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	099b      	lsrs	r3, r3, #6
 8001d30:	461a      	mov	r2, r3
 8001d32:	f04f 0300 	mov.w	r3, #0
 8001d36:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001d3a:	f04f 0100 	mov.w	r1, #0
 8001d3e:	ea02 0800 	and.w	r8, r2, r0
 8001d42:	ea03 0901 	and.w	r9, r3, r1
 8001d46:	4640      	mov	r0, r8
 8001d48:	4649      	mov	r1, r9
 8001d4a:	f04f 0200 	mov.w	r2, #0
 8001d4e:	f04f 0300 	mov.w	r3, #0
 8001d52:	014b      	lsls	r3, r1, #5
 8001d54:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001d58:	0142      	lsls	r2, r0, #5
 8001d5a:	4610      	mov	r0, r2
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	ebb0 0008 	subs.w	r0, r0, r8
 8001d62:	eb61 0109 	sbc.w	r1, r1, r9
 8001d66:	f04f 0200 	mov.w	r2, #0
 8001d6a:	f04f 0300 	mov.w	r3, #0
 8001d6e:	018b      	lsls	r3, r1, #6
 8001d70:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001d74:	0182      	lsls	r2, r0, #6
 8001d76:	1a12      	subs	r2, r2, r0
 8001d78:	eb63 0301 	sbc.w	r3, r3, r1
 8001d7c:	f04f 0000 	mov.w	r0, #0
 8001d80:	f04f 0100 	mov.w	r1, #0
 8001d84:	00d9      	lsls	r1, r3, #3
 8001d86:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001d8a:	00d0      	lsls	r0, r2, #3
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	460b      	mov	r3, r1
 8001d90:	eb12 0208 	adds.w	r2, r2, r8
 8001d94:	eb43 0309 	adc.w	r3, r3, r9
 8001d98:	f04f 0000 	mov.w	r0, #0
 8001d9c:	f04f 0100 	mov.w	r1, #0
 8001da0:	0259      	lsls	r1, r3, #9
 8001da2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001da6:	0250      	lsls	r0, r2, #9
 8001da8:	4602      	mov	r2, r0
 8001daa:	460b      	mov	r3, r1
 8001dac:	4610      	mov	r0, r2
 8001dae:	4619      	mov	r1, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	461a      	mov	r2, r3
 8001db4:	f04f 0300 	mov.w	r3, #0
 8001db8:	f7fe fa6a 	bl	8000290 <__aeabi_uldivmod>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	60fb      	str	r3, [r7, #12]
 8001dc4:	e04a      	b.n	8001e5c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dc6:	4b31      	ldr	r3, [pc, #196]	; (8001e8c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	099b      	lsrs	r3, r3, #6
 8001dcc:	461a      	mov	r2, r3
 8001dce:	f04f 0300 	mov.w	r3, #0
 8001dd2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001dd6:	f04f 0100 	mov.w	r1, #0
 8001dda:	ea02 0400 	and.w	r4, r2, r0
 8001dde:	ea03 0501 	and.w	r5, r3, r1
 8001de2:	4620      	mov	r0, r4
 8001de4:	4629      	mov	r1, r5
 8001de6:	f04f 0200 	mov.w	r2, #0
 8001dea:	f04f 0300 	mov.w	r3, #0
 8001dee:	014b      	lsls	r3, r1, #5
 8001df0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001df4:	0142      	lsls	r2, r0, #5
 8001df6:	4610      	mov	r0, r2
 8001df8:	4619      	mov	r1, r3
 8001dfa:	1b00      	subs	r0, r0, r4
 8001dfc:	eb61 0105 	sbc.w	r1, r1, r5
 8001e00:	f04f 0200 	mov.w	r2, #0
 8001e04:	f04f 0300 	mov.w	r3, #0
 8001e08:	018b      	lsls	r3, r1, #6
 8001e0a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001e0e:	0182      	lsls	r2, r0, #6
 8001e10:	1a12      	subs	r2, r2, r0
 8001e12:	eb63 0301 	sbc.w	r3, r3, r1
 8001e16:	f04f 0000 	mov.w	r0, #0
 8001e1a:	f04f 0100 	mov.w	r1, #0
 8001e1e:	00d9      	lsls	r1, r3, #3
 8001e20:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001e24:	00d0      	lsls	r0, r2, #3
 8001e26:	4602      	mov	r2, r0
 8001e28:	460b      	mov	r3, r1
 8001e2a:	1912      	adds	r2, r2, r4
 8001e2c:	eb45 0303 	adc.w	r3, r5, r3
 8001e30:	f04f 0000 	mov.w	r0, #0
 8001e34:	f04f 0100 	mov.w	r1, #0
 8001e38:	0299      	lsls	r1, r3, #10
 8001e3a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001e3e:	0290      	lsls	r0, r2, #10
 8001e40:	4602      	mov	r2, r0
 8001e42:	460b      	mov	r3, r1
 8001e44:	4610      	mov	r0, r2
 8001e46:	4619      	mov	r1, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	f04f 0300 	mov.w	r3, #0
 8001e50:	f7fe fa1e 	bl	8000290 <__aeabi_uldivmod>
 8001e54:	4602      	mov	r2, r0
 8001e56:	460b      	mov	r3, r1
 8001e58:	4613      	mov	r3, r2
 8001e5a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e5c:	4b0b      	ldr	r3, [pc, #44]	; (8001e8c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	0c1b      	lsrs	r3, r3, #16
 8001e62:	f003 0303 	and.w	r3, r3, #3
 8001e66:	3301      	adds	r3, #1
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001e6c:	68fa      	ldr	r2, [r7, #12]
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e74:	60bb      	str	r3, [r7, #8]
      break;
 8001e76:	e002      	b.n	8001e7e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e78:	4b05      	ldr	r3, [pc, #20]	; (8001e90 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001e7a:	60bb      	str	r3, [r7, #8]
      break;
 8001e7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e7e:	68bb      	ldr	r3, [r7, #8]
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3710      	adds	r7, #16
 8001e84:	46bd      	mov	sp, r7
 8001e86:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001e8a:	bf00      	nop
 8001e8c:	40023800 	.word	0x40023800
 8001e90:	00f42400 	.word	0x00f42400
 8001e94:	007a1200 	.word	0x007a1200

08001e98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e9c:	4b03      	ldr	r3, [pc, #12]	; (8001eac <HAL_RCC_GetHCLKFreq+0x14>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	20000008 	.word	0x20000008

08001eb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001eb4:	f7ff fff0 	bl	8001e98 <HAL_RCC_GetHCLKFreq>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	4b05      	ldr	r3, [pc, #20]	; (8001ed0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	0a9b      	lsrs	r3, r3, #10
 8001ec0:	f003 0307 	and.w	r3, r3, #7
 8001ec4:	4903      	ldr	r1, [pc, #12]	; (8001ed4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ec6:	5ccb      	ldrb	r3, [r1, r3]
 8001ec8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	40023800 	.word	0x40023800
 8001ed4:	08003804 	.word	0x08003804

08001ed8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001edc:	f7ff ffdc 	bl	8001e98 <HAL_RCC_GetHCLKFreq>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	4b05      	ldr	r3, [pc, #20]	; (8001ef8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	0b5b      	lsrs	r3, r3, #13
 8001ee8:	f003 0307 	and.w	r3, r3, #7
 8001eec:	4903      	ldr	r1, [pc, #12]	; (8001efc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001eee:	5ccb      	ldrb	r3, [r1, r3]
 8001ef0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	40023800 	.word	0x40023800
 8001efc:	08003804 	.word	0x08003804

08001f00 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d101      	bne.n	8001f12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e03f      	b.n	8001f92 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d106      	bne.n	8001f2c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f7fe ff0e 	bl	8000d48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2224      	movs	r2, #36	; 0x24
 8001f30:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	68da      	ldr	r2, [r3, #12]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f42:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f000 fba1 	bl	800268c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	691a      	ldr	r2, [r3, #16]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001f58:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	695a      	ldr	r2, [r3, #20]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001f68:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	68da      	ldr	r2, [r3, #12]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f78:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2220      	movs	r2, #32
 8001f84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2220      	movs	r2, #32
 8001f8c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3708      	adds	r7, #8
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}

08001f9a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f9a:	b580      	push	{r7, lr}
 8001f9c:	b088      	sub	sp, #32
 8001f9e:	af02      	add	r7, sp, #8
 8001fa0:	60f8      	str	r0, [r7, #12]
 8001fa2:	60b9      	str	r1, [r7, #8]
 8001fa4:	603b      	str	r3, [r7, #0]
 8001fa6:	4613      	mov	r3, r2
 8001fa8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001faa:	2300      	movs	r3, #0
 8001fac:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	2b20      	cmp	r3, #32
 8001fb8:	f040 8083 	bne.w	80020c2 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d002      	beq.n	8001fc8 <HAL_UART_Transmit+0x2e>
 8001fc2:	88fb      	ldrh	r3, [r7, #6]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d101      	bne.n	8001fcc <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e07b      	b.n	80020c4 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d101      	bne.n	8001fda <HAL_UART_Transmit+0x40>
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	e074      	b.n	80020c4 <HAL_UART_Transmit+0x12a>
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2201      	movs	r2, #1
 8001fde:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2221      	movs	r2, #33	; 0x21
 8001fec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001ff0:	f7ff f80a 	bl	8001008 <HAL_GetTick>
 8001ff4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	88fa      	ldrh	r2, [r7, #6]
 8001ffa:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	88fa      	ldrh	r2, [r7, #6]
 8002000:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2200      	movs	r2, #0
 8002006:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800200a:	e042      	b.n	8002092 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002010:	b29b      	uxth	r3, r3
 8002012:	3b01      	subs	r3, #1
 8002014:	b29a      	uxth	r2, r3
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002022:	d122      	bne.n	800206a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	9300      	str	r3, [sp, #0]
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	2200      	movs	r2, #0
 800202c:	2180      	movs	r1, #128	; 0x80
 800202e:	68f8      	ldr	r0, [r7, #12]
 8002030:	f000 f9c0 	bl	80023b4 <UART_WaitOnFlagUntilTimeout>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e042      	b.n	80020c4 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	881b      	ldrh	r3, [r3, #0]
 8002046:	461a      	mov	r2, r3
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002050:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	691b      	ldr	r3, [r3, #16]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d103      	bne.n	8002062 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	3302      	adds	r3, #2
 800205e:	60bb      	str	r3, [r7, #8]
 8002060:	e017      	b.n	8002092 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	3301      	adds	r3, #1
 8002066:	60bb      	str	r3, [r7, #8]
 8002068:	e013      	b.n	8002092 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	9300      	str	r3, [sp, #0]
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	2200      	movs	r2, #0
 8002072:	2180      	movs	r1, #128	; 0x80
 8002074:	68f8      	ldr	r0, [r7, #12]
 8002076:	f000 f99d 	bl	80023b4 <UART_WaitOnFlagUntilTimeout>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d001      	beq.n	8002084 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e01f      	b.n	80020c4 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	1c5a      	adds	r2, r3, #1
 8002088:	60ba      	str	r2, [r7, #8]
 800208a:	781a      	ldrb	r2, [r3, #0]
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002096:	b29b      	uxth	r3, r3
 8002098:	2b00      	cmp	r3, #0
 800209a:	d1b7      	bne.n	800200c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	9300      	str	r3, [sp, #0]
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	2200      	movs	r2, #0
 80020a4:	2140      	movs	r1, #64	; 0x40
 80020a6:	68f8      	ldr	r0, [r7, #12]
 80020a8:	f000 f984 	bl	80023b4 <UART_WaitOnFlagUntilTimeout>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e006      	b.n	80020c4 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2220      	movs	r2, #32
 80020ba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80020be:	2300      	movs	r3, #0
 80020c0:	e000      	b.n	80020c4 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80020c2:	2302      	movs	r3, #2
  }
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3718      	adds	r7, #24
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}

080020cc <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b085      	sub	sp, #20
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	60f8      	str	r0, [r7, #12]
 80020d4:	60b9      	str	r1, [r7, #8]
 80020d6:	4613      	mov	r3, r2
 80020d8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	2b20      	cmp	r3, #32
 80020e4:	d140      	bne.n	8002168 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d002      	beq.n	80020f2 <HAL_UART_Receive_IT+0x26>
 80020ec:	88fb      	ldrh	r3, [r7, #6]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d101      	bne.n	80020f6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e039      	b.n	800216a <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d101      	bne.n	8002104 <HAL_UART_Receive_IT+0x38>
 8002100:	2302      	movs	r3, #2
 8002102:	e032      	b.n	800216a <HAL_UART_Receive_IT+0x9e>
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2201      	movs	r2, #1
 8002108:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	68ba      	ldr	r2, [r7, #8]
 8002110:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	88fa      	ldrh	r2, [r7, #6]
 8002116:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	88fa      	ldrh	r2, [r7, #6]
 800211c:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2200      	movs	r2, #0
 8002122:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2222      	movs	r2, #34	; 0x22
 8002128:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2200      	movs	r2, #0
 8002130:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	68da      	ldr	r2, [r3, #12]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002142:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	695a      	ldr	r2, [r3, #20]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f042 0201 	orr.w	r2, r2, #1
 8002152:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	68da      	ldr	r2, [r3, #12]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f042 0220 	orr.w	r2, r2, #32
 8002162:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002164:	2300      	movs	r3, #0
 8002166:	e000      	b.n	800216a <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002168:	2302      	movs	r3, #2
  }
}
 800216a:	4618      	mov	r0, r3
 800216c:	3714      	adds	r7, #20
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
	...

08002178 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b088      	sub	sp, #32
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	695b      	ldr	r3, [r3, #20]
 8002196:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002198:	2300      	movs	r3, #0
 800219a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800219c:	2300      	movs	r3, #0
 800219e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	f003 030f 	and.w	r3, r3, #15
 80021a6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d10d      	bne.n	80021ca <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	f003 0320 	and.w	r3, r3, #32
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d008      	beq.n	80021ca <HAL_UART_IRQHandler+0x52>
 80021b8:	69bb      	ldr	r3, [r7, #24]
 80021ba:	f003 0320 	and.w	r3, r3, #32
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d003      	beq.n	80021ca <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f000 f9e0 	bl	8002588 <UART_Receive_IT>
      return;
 80021c8:	e0d0      	b.n	800236c <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	f000 80b0 	beq.w	8002332 <HAL_UART_IRQHandler+0x1ba>
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	f003 0301 	and.w	r3, r3, #1
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d105      	bne.n	80021e8 <HAL_UART_IRQHandler+0x70>
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	f000 80a5 	beq.w	8002332 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	f003 0301 	and.w	r3, r3, #1
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d00a      	beq.n	8002208 <HAL_UART_IRQHandler+0x90>
 80021f2:	69bb      	ldr	r3, [r7, #24]
 80021f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d005      	beq.n	8002208 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002200:	f043 0201 	orr.w	r2, r3, #1
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	f003 0304 	and.w	r3, r3, #4
 800220e:	2b00      	cmp	r3, #0
 8002210:	d00a      	beq.n	8002228 <HAL_UART_IRQHandler+0xb0>
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	f003 0301 	and.w	r3, r3, #1
 8002218:	2b00      	cmp	r3, #0
 800221a:	d005      	beq.n	8002228 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002220:	f043 0202 	orr.w	r2, r3, #2
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	f003 0302 	and.w	r3, r3, #2
 800222e:	2b00      	cmp	r3, #0
 8002230:	d00a      	beq.n	8002248 <HAL_UART_IRQHandler+0xd0>
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	f003 0301 	and.w	r3, r3, #1
 8002238:	2b00      	cmp	r3, #0
 800223a:	d005      	beq.n	8002248 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002240:	f043 0204 	orr.w	r2, r3, #4
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	f003 0308 	and.w	r3, r3, #8
 800224e:	2b00      	cmp	r3, #0
 8002250:	d00f      	beq.n	8002272 <HAL_UART_IRQHandler+0xfa>
 8002252:	69bb      	ldr	r3, [r7, #24]
 8002254:	f003 0320 	and.w	r3, r3, #32
 8002258:	2b00      	cmp	r3, #0
 800225a:	d104      	bne.n	8002266 <HAL_UART_IRQHandler+0xee>
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	f003 0301 	and.w	r3, r3, #1
 8002262:	2b00      	cmp	r3, #0
 8002264:	d005      	beq.n	8002272 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800226a:	f043 0208 	orr.w	r2, r3, #8
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002276:	2b00      	cmp	r3, #0
 8002278:	d077      	beq.n	800236a <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	f003 0320 	and.w	r3, r3, #32
 8002280:	2b00      	cmp	r3, #0
 8002282:	d007      	beq.n	8002294 <HAL_UART_IRQHandler+0x11c>
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	f003 0320 	and.w	r3, r3, #32
 800228a:	2b00      	cmp	r3, #0
 800228c:	d002      	beq.n	8002294 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f000 f97a 	bl	8002588 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	695b      	ldr	r3, [r3, #20]
 800229a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800229e:	2b40      	cmp	r3, #64	; 0x40
 80022a0:	bf0c      	ite	eq
 80022a2:	2301      	moveq	r3, #1
 80022a4:	2300      	movne	r3, #0
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ae:	f003 0308 	and.w	r3, r3, #8
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d102      	bne.n	80022bc <HAL_UART_IRQHandler+0x144>
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d031      	beq.n	8002320 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f000 f8c3 	bl	8002448 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	695b      	ldr	r3, [r3, #20]
 80022c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022cc:	2b40      	cmp	r3, #64	; 0x40
 80022ce:	d123      	bne.n	8002318 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	695a      	ldr	r2, [r3, #20]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022de:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d013      	beq.n	8002310 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022ec:	4a21      	ldr	r2, [pc, #132]	; (8002374 <HAL_UART_IRQHandler+0x1fc>)
 80022ee:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022f4:	4618      	mov	r0, r3
 80022f6:	f7fe ffa4 	bl	8001242 <HAL_DMA_Abort_IT>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d016      	beq.n	800232e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002304:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800230a:	4610      	mov	r0, r2
 800230c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800230e:	e00e      	b.n	800232e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f000 f845 	bl	80023a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002316:	e00a      	b.n	800232e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f000 f841 	bl	80023a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800231e:	e006      	b.n	800232e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	f000 f83d 	bl	80023a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800232c:	e01d      	b.n	800236a <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800232e:	bf00      	nop
    return;
 8002330:	e01b      	b.n	800236a <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002338:	2b00      	cmp	r3, #0
 800233a:	d008      	beq.n	800234e <HAL_UART_IRQHandler+0x1d6>
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002342:	2b00      	cmp	r3, #0
 8002344:	d003      	beq.n	800234e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f000 f8b0 	bl	80024ac <UART_Transmit_IT>
    return;
 800234c:	e00e      	b.n	800236c <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002354:	2b00      	cmp	r3, #0
 8002356:	d009      	beq.n	800236c <HAL_UART_IRQHandler+0x1f4>
 8002358:	69bb      	ldr	r3, [r7, #24]
 800235a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800235e:	2b00      	cmp	r3, #0
 8002360:	d004      	beq.n	800236c <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f000 f8f8 	bl	8002558 <UART_EndTransmit_IT>
    return;
 8002368:	e000      	b.n	800236c <HAL_UART_IRQHandler+0x1f4>
    return;
 800236a:	bf00      	nop
  }
}
 800236c:	3720      	adds	r7, #32
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	08002485 	.word	0x08002485

08002378 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002380:	bf00      	nop
 8002382:	370c      	adds	r7, #12
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002394:	bf00      	nop
 8002396:	370c      	adds	r7, #12
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr

080023a0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80023a8:	bf00      	nop
 80023aa:	370c      	adds	r7, #12
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	60f8      	str	r0, [r7, #12]
 80023bc:	60b9      	str	r1, [r7, #8]
 80023be:	603b      	str	r3, [r7, #0]
 80023c0:	4613      	mov	r3, r2
 80023c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023c4:	e02c      	b.n	8002420 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023cc:	d028      	beq.n	8002420 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d007      	beq.n	80023e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80023d4:	f7fe fe18 	bl	8001008 <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	69ba      	ldr	r2, [r7, #24]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d21d      	bcs.n	8002420 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	68da      	ldr	r2, [r3, #12]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80023f2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	695a      	ldr	r2, [r3, #20]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f022 0201 	bic.w	r2, r2, #1
 8002402:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2220      	movs	r2, #32
 8002408:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2220      	movs	r2, #32
 8002410:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2200      	movs	r2, #0
 8002418:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800241c:	2303      	movs	r3, #3
 800241e:	e00f      	b.n	8002440 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	4013      	ands	r3, r2
 800242a:	68ba      	ldr	r2, [r7, #8]
 800242c:	429a      	cmp	r2, r3
 800242e:	bf0c      	ite	eq
 8002430:	2301      	moveq	r3, #1
 8002432:	2300      	movne	r3, #0
 8002434:	b2db      	uxtb	r3, r3
 8002436:	461a      	mov	r2, r3
 8002438:	79fb      	ldrb	r3, [r7, #7]
 800243a:	429a      	cmp	r2, r3
 800243c:	d0c3      	beq.n	80023c6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800243e:	2300      	movs	r3, #0
}
 8002440:	4618      	mov	r0, r3
 8002442:	3710      	adds	r7, #16
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}

08002448 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	68da      	ldr	r2, [r3, #12]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800245e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	695a      	ldr	r2, [r3, #20]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f022 0201 	bic.w	r2, r2, #1
 800246e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2220      	movs	r2, #32
 8002474:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002478:	bf00      	nop
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002490:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2200      	movs	r2, #0
 8002496:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2200      	movs	r2, #0
 800249c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800249e:	68f8      	ldr	r0, [r7, #12]
 80024a0:	f7ff ff7e 	bl	80023a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80024a4:	bf00      	nop
 80024a6:	3710      	adds	r7, #16
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}

080024ac <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b085      	sub	sp, #20
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	2b21      	cmp	r3, #33	; 0x21
 80024be:	d144      	bne.n	800254a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024c8:	d11a      	bne.n	8002500 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6a1b      	ldr	r3, [r3, #32]
 80024ce:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	881b      	ldrh	r3, [r3, #0]
 80024d4:	461a      	mov	r2, r3
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80024de:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	691b      	ldr	r3, [r3, #16]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d105      	bne.n	80024f4 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6a1b      	ldr	r3, [r3, #32]
 80024ec:	1c9a      	adds	r2, r3, #2
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	621a      	str	r2, [r3, #32]
 80024f2:	e00e      	b.n	8002512 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6a1b      	ldr	r3, [r3, #32]
 80024f8:	1c5a      	adds	r2, r3, #1
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	621a      	str	r2, [r3, #32]
 80024fe:	e008      	b.n	8002512 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6a1b      	ldr	r3, [r3, #32]
 8002504:	1c59      	adds	r1, r3, #1
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	6211      	str	r1, [r2, #32]
 800250a:	781a      	ldrb	r2, [r3, #0]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002516:	b29b      	uxth	r3, r3
 8002518:	3b01      	subs	r3, #1
 800251a:	b29b      	uxth	r3, r3
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	4619      	mov	r1, r3
 8002520:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002522:	2b00      	cmp	r3, #0
 8002524:	d10f      	bne.n	8002546 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	68da      	ldr	r2, [r3, #12]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002534:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	68da      	ldr	r2, [r3, #12]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002544:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002546:	2300      	movs	r3, #0
 8002548:	e000      	b.n	800254c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800254a:	2302      	movs	r3, #2
  }
}
 800254c:	4618      	mov	r0, r3
 800254e:	3714      	adds	r7, #20
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr

08002558 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	68da      	ldr	r2, [r3, #12]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800256e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2220      	movs	r2, #32
 8002574:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f7ff fefd 	bl	8002378 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800257e:	2300      	movs	r3, #0
}
 8002580:	4618      	mov	r0, r3
 8002582:	3708      	adds	r7, #8
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}

08002588 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002596:	b2db      	uxtb	r3, r3
 8002598:	2b22      	cmp	r3, #34	; 0x22
 800259a:	d171      	bne.n	8002680 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025a4:	d123      	bne.n	80025ee <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025aa:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	691b      	ldr	r3, [r3, #16]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d10e      	bne.n	80025d2 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	b29b      	uxth	r3, r3
 80025bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025c0:	b29a      	uxth	r2, r3
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ca:	1c9a      	adds	r2, r3, #2
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	629a      	str	r2, [r3, #40]	; 0x28
 80025d0:	e029      	b.n	8002626 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	b29b      	uxth	r3, r3
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	b29a      	uxth	r2, r3
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025e6:	1c5a      	adds	r2, r3, #1
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	629a      	str	r2, [r3, #40]	; 0x28
 80025ec:	e01b      	b.n	8002626 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d10a      	bne.n	800260c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	6858      	ldr	r0, [r3, #4]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002600:	1c59      	adds	r1, r3, #1
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	6291      	str	r1, [r2, #40]	; 0x28
 8002606:	b2c2      	uxtb	r2, r0
 8002608:	701a      	strb	r2, [r3, #0]
 800260a:	e00c      	b.n	8002626 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	b2da      	uxtb	r2, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002618:	1c58      	adds	r0, r3, #1
 800261a:	6879      	ldr	r1, [r7, #4]
 800261c:	6288      	str	r0, [r1, #40]	; 0x28
 800261e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002622:	b2d2      	uxtb	r2, r2
 8002624:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800262a:	b29b      	uxth	r3, r3
 800262c:	3b01      	subs	r3, #1
 800262e:	b29b      	uxth	r3, r3
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	4619      	mov	r1, r3
 8002634:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002636:	2b00      	cmp	r3, #0
 8002638:	d120      	bne.n	800267c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	68da      	ldr	r2, [r3, #12]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f022 0220 	bic.w	r2, r2, #32
 8002648:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	68da      	ldr	r2, [r3, #12]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002658:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	695a      	ldr	r2, [r3, #20]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f022 0201 	bic.w	r2, r2, #1
 8002668:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2220      	movs	r2, #32
 800266e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f7ff fe8a 	bl	800238c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002678:	2300      	movs	r3, #0
 800267a:	e002      	b.n	8002682 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800267c:	2300      	movs	r3, #0
 800267e:	e000      	b.n	8002682 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8002680:	2302      	movs	r3, #2
  }
}
 8002682:	4618      	mov	r0, r3
 8002684:	3710      	adds	r7, #16
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
	...

0800268c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800268c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002690:	b0bd      	sub	sp, #244	; 0xf4
 8002692:	af00      	add	r7, sp, #0
 8002694:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002698:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	691b      	ldr	r3, [r3, #16]
 80026a0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80026a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026a8:	68d9      	ldr	r1, [r3, #12]
 80026aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	ea40 0301 	orr.w	r3, r0, r1
 80026b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80026b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026ba:	689a      	ldr	r2, [r3, #8]
 80026bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026c0:	691b      	ldr	r3, [r3, #16]
 80026c2:	431a      	orrs	r2, r3
 80026c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026c8:	695b      	ldr	r3, [r3, #20]
 80026ca:	431a      	orrs	r2, r3
 80026cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026d0:	69db      	ldr	r3, [r3, #28]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 80026d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80026e4:	f021 010c 	bic.w	r1, r1, #12
 80026e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80026f2:	430b      	orrs	r3, r1
 80026f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80026f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	695b      	ldr	r3, [r3, #20]
 80026fe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002702:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002706:	6999      	ldr	r1, [r3, #24]
 8002708:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	ea40 0301 	orr.w	r3, r0, r1
 8002712:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002714:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002718:	69db      	ldr	r3, [r3, #28]
 800271a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800271e:	f040 81a5 	bne.w	8002a6c <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002722:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	4bcd      	ldr	r3, [pc, #820]	; (8002a60 <UART_SetConfig+0x3d4>)
 800272a:	429a      	cmp	r2, r3
 800272c:	d006      	beq.n	800273c <UART_SetConfig+0xb0>
 800272e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	4bcb      	ldr	r3, [pc, #812]	; (8002a64 <UART_SetConfig+0x3d8>)
 8002736:	429a      	cmp	r2, r3
 8002738:	f040 80cb 	bne.w	80028d2 <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800273c:	f7ff fbcc 	bl	8001ed8 <HAL_RCC_GetPCLK2Freq>
 8002740:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002744:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002748:	461c      	mov	r4, r3
 800274a:	f04f 0500 	mov.w	r5, #0
 800274e:	4622      	mov	r2, r4
 8002750:	462b      	mov	r3, r5
 8002752:	1891      	adds	r1, r2, r2
 8002754:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8002758:	415b      	adcs	r3, r3
 800275a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800275e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002762:	1912      	adds	r2, r2, r4
 8002764:	eb45 0303 	adc.w	r3, r5, r3
 8002768:	f04f 0000 	mov.w	r0, #0
 800276c:	f04f 0100 	mov.w	r1, #0
 8002770:	00d9      	lsls	r1, r3, #3
 8002772:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002776:	00d0      	lsls	r0, r2, #3
 8002778:	4602      	mov	r2, r0
 800277a:	460b      	mov	r3, r1
 800277c:	1911      	adds	r1, r2, r4
 800277e:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8002782:	416b      	adcs	r3, r5
 8002784:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8002788:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	461a      	mov	r2, r3
 8002790:	f04f 0300 	mov.w	r3, #0
 8002794:	1891      	adds	r1, r2, r2
 8002796:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800279a:	415b      	adcs	r3, r3
 800279c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80027a0:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80027a4:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 80027a8:	f7fd fd72 	bl	8000290 <__aeabi_uldivmod>
 80027ac:	4602      	mov	r2, r0
 80027ae:	460b      	mov	r3, r1
 80027b0:	4bad      	ldr	r3, [pc, #692]	; (8002a68 <UART_SetConfig+0x3dc>)
 80027b2:	fba3 2302 	umull	r2, r3, r3, r2
 80027b6:	095b      	lsrs	r3, r3, #5
 80027b8:	011e      	lsls	r6, r3, #4
 80027ba:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80027be:	461c      	mov	r4, r3
 80027c0:	f04f 0500 	mov.w	r5, #0
 80027c4:	4622      	mov	r2, r4
 80027c6:	462b      	mov	r3, r5
 80027c8:	1891      	adds	r1, r2, r2
 80027ca:	67b9      	str	r1, [r7, #120]	; 0x78
 80027cc:	415b      	adcs	r3, r3
 80027ce:	67fb      	str	r3, [r7, #124]	; 0x7c
 80027d0:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80027d4:	1912      	adds	r2, r2, r4
 80027d6:	eb45 0303 	adc.w	r3, r5, r3
 80027da:	f04f 0000 	mov.w	r0, #0
 80027de:	f04f 0100 	mov.w	r1, #0
 80027e2:	00d9      	lsls	r1, r3, #3
 80027e4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80027e8:	00d0      	lsls	r0, r2, #3
 80027ea:	4602      	mov	r2, r0
 80027ec:	460b      	mov	r3, r1
 80027ee:	1911      	adds	r1, r2, r4
 80027f0:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 80027f4:	416b      	adcs	r3, r5
 80027f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80027fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	461a      	mov	r2, r3
 8002802:	f04f 0300 	mov.w	r3, #0
 8002806:	1891      	adds	r1, r2, r2
 8002808:	6739      	str	r1, [r7, #112]	; 0x70
 800280a:	415b      	adcs	r3, r3
 800280c:	677b      	str	r3, [r7, #116]	; 0x74
 800280e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002812:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8002816:	f7fd fd3b 	bl	8000290 <__aeabi_uldivmod>
 800281a:	4602      	mov	r2, r0
 800281c:	460b      	mov	r3, r1
 800281e:	4b92      	ldr	r3, [pc, #584]	; (8002a68 <UART_SetConfig+0x3dc>)
 8002820:	fba3 1302 	umull	r1, r3, r3, r2
 8002824:	095b      	lsrs	r3, r3, #5
 8002826:	2164      	movs	r1, #100	; 0x64
 8002828:	fb01 f303 	mul.w	r3, r1, r3
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	00db      	lsls	r3, r3, #3
 8002830:	3332      	adds	r3, #50	; 0x32
 8002832:	4a8d      	ldr	r2, [pc, #564]	; (8002a68 <UART_SetConfig+0x3dc>)
 8002834:	fba2 2303 	umull	r2, r3, r2, r3
 8002838:	095b      	lsrs	r3, r3, #5
 800283a:	005b      	lsls	r3, r3, #1
 800283c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002840:	441e      	add	r6, r3
 8002842:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002846:	4618      	mov	r0, r3
 8002848:	f04f 0100 	mov.w	r1, #0
 800284c:	4602      	mov	r2, r0
 800284e:	460b      	mov	r3, r1
 8002850:	1894      	adds	r4, r2, r2
 8002852:	66bc      	str	r4, [r7, #104]	; 0x68
 8002854:	415b      	adcs	r3, r3
 8002856:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002858:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800285c:	1812      	adds	r2, r2, r0
 800285e:	eb41 0303 	adc.w	r3, r1, r3
 8002862:	f04f 0400 	mov.w	r4, #0
 8002866:	f04f 0500 	mov.w	r5, #0
 800286a:	00dd      	lsls	r5, r3, #3
 800286c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002870:	00d4      	lsls	r4, r2, #3
 8002872:	4622      	mov	r2, r4
 8002874:	462b      	mov	r3, r5
 8002876:	1814      	adds	r4, r2, r0
 8002878:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 800287c:	414b      	adcs	r3, r1
 800287e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002882:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	461a      	mov	r2, r3
 800288a:	f04f 0300 	mov.w	r3, #0
 800288e:	1891      	adds	r1, r2, r2
 8002890:	6639      	str	r1, [r7, #96]	; 0x60
 8002892:	415b      	adcs	r3, r3
 8002894:	667b      	str	r3, [r7, #100]	; 0x64
 8002896:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800289a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800289e:	f7fd fcf7 	bl	8000290 <__aeabi_uldivmod>
 80028a2:	4602      	mov	r2, r0
 80028a4:	460b      	mov	r3, r1
 80028a6:	4b70      	ldr	r3, [pc, #448]	; (8002a68 <UART_SetConfig+0x3dc>)
 80028a8:	fba3 1302 	umull	r1, r3, r3, r2
 80028ac:	095b      	lsrs	r3, r3, #5
 80028ae:	2164      	movs	r1, #100	; 0x64
 80028b0:	fb01 f303 	mul.w	r3, r1, r3
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	00db      	lsls	r3, r3, #3
 80028b8:	3332      	adds	r3, #50	; 0x32
 80028ba:	4a6b      	ldr	r2, [pc, #428]	; (8002a68 <UART_SetConfig+0x3dc>)
 80028bc:	fba2 2303 	umull	r2, r3, r2, r3
 80028c0:	095b      	lsrs	r3, r3, #5
 80028c2:	f003 0207 	and.w	r2, r3, #7
 80028c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4432      	add	r2, r6
 80028ce:	609a      	str	r2, [r3, #8]
 80028d0:	e26d      	b.n	8002dae <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80028d2:	f7ff faed 	bl	8001eb0 <HAL_RCC_GetPCLK1Freq>
 80028d6:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80028da:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80028de:	461c      	mov	r4, r3
 80028e0:	f04f 0500 	mov.w	r5, #0
 80028e4:	4622      	mov	r2, r4
 80028e6:	462b      	mov	r3, r5
 80028e8:	1891      	adds	r1, r2, r2
 80028ea:	65b9      	str	r1, [r7, #88]	; 0x58
 80028ec:	415b      	adcs	r3, r3
 80028ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80028f0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80028f4:	1912      	adds	r2, r2, r4
 80028f6:	eb45 0303 	adc.w	r3, r5, r3
 80028fa:	f04f 0000 	mov.w	r0, #0
 80028fe:	f04f 0100 	mov.w	r1, #0
 8002902:	00d9      	lsls	r1, r3, #3
 8002904:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002908:	00d0      	lsls	r0, r2, #3
 800290a:	4602      	mov	r2, r0
 800290c:	460b      	mov	r3, r1
 800290e:	1911      	adds	r1, r2, r4
 8002910:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8002914:	416b      	adcs	r3, r5
 8002916:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800291a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	461a      	mov	r2, r3
 8002922:	f04f 0300 	mov.w	r3, #0
 8002926:	1891      	adds	r1, r2, r2
 8002928:	6539      	str	r1, [r7, #80]	; 0x50
 800292a:	415b      	adcs	r3, r3
 800292c:	657b      	str	r3, [r7, #84]	; 0x54
 800292e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002932:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8002936:	f7fd fcab 	bl	8000290 <__aeabi_uldivmod>
 800293a:	4602      	mov	r2, r0
 800293c:	460b      	mov	r3, r1
 800293e:	4b4a      	ldr	r3, [pc, #296]	; (8002a68 <UART_SetConfig+0x3dc>)
 8002940:	fba3 2302 	umull	r2, r3, r3, r2
 8002944:	095b      	lsrs	r3, r3, #5
 8002946:	011e      	lsls	r6, r3, #4
 8002948:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800294c:	461c      	mov	r4, r3
 800294e:	f04f 0500 	mov.w	r5, #0
 8002952:	4622      	mov	r2, r4
 8002954:	462b      	mov	r3, r5
 8002956:	1891      	adds	r1, r2, r2
 8002958:	64b9      	str	r1, [r7, #72]	; 0x48
 800295a:	415b      	adcs	r3, r3
 800295c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800295e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002962:	1912      	adds	r2, r2, r4
 8002964:	eb45 0303 	adc.w	r3, r5, r3
 8002968:	f04f 0000 	mov.w	r0, #0
 800296c:	f04f 0100 	mov.w	r1, #0
 8002970:	00d9      	lsls	r1, r3, #3
 8002972:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002976:	00d0      	lsls	r0, r2, #3
 8002978:	4602      	mov	r2, r0
 800297a:	460b      	mov	r3, r1
 800297c:	1911      	adds	r1, r2, r4
 800297e:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8002982:	416b      	adcs	r3, r5
 8002984:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002988:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	461a      	mov	r2, r3
 8002990:	f04f 0300 	mov.w	r3, #0
 8002994:	1891      	adds	r1, r2, r2
 8002996:	6439      	str	r1, [r7, #64]	; 0x40
 8002998:	415b      	adcs	r3, r3
 800299a:	647b      	str	r3, [r7, #68]	; 0x44
 800299c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80029a0:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80029a4:	f7fd fc74 	bl	8000290 <__aeabi_uldivmod>
 80029a8:	4602      	mov	r2, r0
 80029aa:	460b      	mov	r3, r1
 80029ac:	4b2e      	ldr	r3, [pc, #184]	; (8002a68 <UART_SetConfig+0x3dc>)
 80029ae:	fba3 1302 	umull	r1, r3, r3, r2
 80029b2:	095b      	lsrs	r3, r3, #5
 80029b4:	2164      	movs	r1, #100	; 0x64
 80029b6:	fb01 f303 	mul.w	r3, r1, r3
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	00db      	lsls	r3, r3, #3
 80029be:	3332      	adds	r3, #50	; 0x32
 80029c0:	4a29      	ldr	r2, [pc, #164]	; (8002a68 <UART_SetConfig+0x3dc>)
 80029c2:	fba2 2303 	umull	r2, r3, r2, r3
 80029c6:	095b      	lsrs	r3, r3, #5
 80029c8:	005b      	lsls	r3, r3, #1
 80029ca:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80029ce:	441e      	add	r6, r3
 80029d0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80029d4:	4618      	mov	r0, r3
 80029d6:	f04f 0100 	mov.w	r1, #0
 80029da:	4602      	mov	r2, r0
 80029dc:	460b      	mov	r3, r1
 80029de:	1894      	adds	r4, r2, r2
 80029e0:	63bc      	str	r4, [r7, #56]	; 0x38
 80029e2:	415b      	adcs	r3, r3
 80029e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029e6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80029ea:	1812      	adds	r2, r2, r0
 80029ec:	eb41 0303 	adc.w	r3, r1, r3
 80029f0:	f04f 0400 	mov.w	r4, #0
 80029f4:	f04f 0500 	mov.w	r5, #0
 80029f8:	00dd      	lsls	r5, r3, #3
 80029fa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80029fe:	00d4      	lsls	r4, r2, #3
 8002a00:	4622      	mov	r2, r4
 8002a02:	462b      	mov	r3, r5
 8002a04:	1814      	adds	r4, r2, r0
 8002a06:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8002a0a:	414b      	adcs	r3, r1
 8002a0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002a10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	461a      	mov	r2, r3
 8002a18:	f04f 0300 	mov.w	r3, #0
 8002a1c:	1891      	adds	r1, r2, r2
 8002a1e:	6339      	str	r1, [r7, #48]	; 0x30
 8002a20:	415b      	adcs	r3, r3
 8002a22:	637b      	str	r3, [r7, #52]	; 0x34
 8002a24:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002a28:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002a2c:	f7fd fc30 	bl	8000290 <__aeabi_uldivmod>
 8002a30:	4602      	mov	r2, r0
 8002a32:	460b      	mov	r3, r1
 8002a34:	4b0c      	ldr	r3, [pc, #48]	; (8002a68 <UART_SetConfig+0x3dc>)
 8002a36:	fba3 1302 	umull	r1, r3, r3, r2
 8002a3a:	095b      	lsrs	r3, r3, #5
 8002a3c:	2164      	movs	r1, #100	; 0x64
 8002a3e:	fb01 f303 	mul.w	r3, r1, r3
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	00db      	lsls	r3, r3, #3
 8002a46:	3332      	adds	r3, #50	; 0x32
 8002a48:	4a07      	ldr	r2, [pc, #28]	; (8002a68 <UART_SetConfig+0x3dc>)
 8002a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a4e:	095b      	lsrs	r3, r3, #5
 8002a50:	f003 0207 	and.w	r2, r3, #7
 8002a54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4432      	add	r2, r6
 8002a5c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002a5e:	e1a6      	b.n	8002dae <UART_SetConfig+0x722>
 8002a60:	40011000 	.word	0x40011000
 8002a64:	40011400 	.word	0x40011400
 8002a68:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002a6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	4bd1      	ldr	r3, [pc, #836]	; (8002db8 <UART_SetConfig+0x72c>)
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d006      	beq.n	8002a86 <UART_SetConfig+0x3fa>
 8002a78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	4bcf      	ldr	r3, [pc, #828]	; (8002dbc <UART_SetConfig+0x730>)
 8002a80:	429a      	cmp	r2, r3
 8002a82:	f040 80ca 	bne.w	8002c1a <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002a86:	f7ff fa27 	bl	8001ed8 <HAL_RCC_GetPCLK2Freq>
 8002a8a:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a8e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002a92:	461c      	mov	r4, r3
 8002a94:	f04f 0500 	mov.w	r5, #0
 8002a98:	4622      	mov	r2, r4
 8002a9a:	462b      	mov	r3, r5
 8002a9c:	1891      	adds	r1, r2, r2
 8002a9e:	62b9      	str	r1, [r7, #40]	; 0x28
 8002aa0:	415b      	adcs	r3, r3
 8002aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002aa4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002aa8:	1912      	adds	r2, r2, r4
 8002aaa:	eb45 0303 	adc.w	r3, r5, r3
 8002aae:	f04f 0000 	mov.w	r0, #0
 8002ab2:	f04f 0100 	mov.w	r1, #0
 8002ab6:	00d9      	lsls	r1, r3, #3
 8002ab8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002abc:	00d0      	lsls	r0, r2, #3
 8002abe:	4602      	mov	r2, r0
 8002ac0:	460b      	mov	r3, r1
 8002ac2:	eb12 0a04 	adds.w	sl, r2, r4
 8002ac6:	eb43 0b05 	adc.w	fp, r3, r5
 8002aca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f04f 0100 	mov.w	r1, #0
 8002ad6:	f04f 0200 	mov.w	r2, #0
 8002ada:	f04f 0300 	mov.w	r3, #0
 8002ade:	008b      	lsls	r3, r1, #2
 8002ae0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002ae4:	0082      	lsls	r2, r0, #2
 8002ae6:	4650      	mov	r0, sl
 8002ae8:	4659      	mov	r1, fp
 8002aea:	f7fd fbd1 	bl	8000290 <__aeabi_uldivmod>
 8002aee:	4602      	mov	r2, r0
 8002af0:	460b      	mov	r3, r1
 8002af2:	4bb3      	ldr	r3, [pc, #716]	; (8002dc0 <UART_SetConfig+0x734>)
 8002af4:	fba3 2302 	umull	r2, r3, r3, r2
 8002af8:	095b      	lsrs	r3, r3, #5
 8002afa:	011e      	lsls	r6, r3, #4
 8002afc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002b00:	4618      	mov	r0, r3
 8002b02:	f04f 0100 	mov.w	r1, #0
 8002b06:	4602      	mov	r2, r0
 8002b08:	460b      	mov	r3, r1
 8002b0a:	1894      	adds	r4, r2, r2
 8002b0c:	623c      	str	r4, [r7, #32]
 8002b0e:	415b      	adcs	r3, r3
 8002b10:	627b      	str	r3, [r7, #36]	; 0x24
 8002b12:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002b16:	1812      	adds	r2, r2, r0
 8002b18:	eb41 0303 	adc.w	r3, r1, r3
 8002b1c:	f04f 0400 	mov.w	r4, #0
 8002b20:	f04f 0500 	mov.w	r5, #0
 8002b24:	00dd      	lsls	r5, r3, #3
 8002b26:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002b2a:	00d4      	lsls	r4, r2, #3
 8002b2c:	4622      	mov	r2, r4
 8002b2e:	462b      	mov	r3, r5
 8002b30:	1814      	adds	r4, r2, r0
 8002b32:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8002b36:	414b      	adcs	r3, r1
 8002b38:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002b3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	4618      	mov	r0, r3
 8002b44:	f04f 0100 	mov.w	r1, #0
 8002b48:	f04f 0200 	mov.w	r2, #0
 8002b4c:	f04f 0300 	mov.w	r3, #0
 8002b50:	008b      	lsls	r3, r1, #2
 8002b52:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002b56:	0082      	lsls	r2, r0, #2
 8002b58:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8002b5c:	f7fd fb98 	bl	8000290 <__aeabi_uldivmod>
 8002b60:	4602      	mov	r2, r0
 8002b62:	460b      	mov	r3, r1
 8002b64:	4b96      	ldr	r3, [pc, #600]	; (8002dc0 <UART_SetConfig+0x734>)
 8002b66:	fba3 1302 	umull	r1, r3, r3, r2
 8002b6a:	095b      	lsrs	r3, r3, #5
 8002b6c:	2164      	movs	r1, #100	; 0x64
 8002b6e:	fb01 f303 	mul.w	r3, r1, r3
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	011b      	lsls	r3, r3, #4
 8002b76:	3332      	adds	r3, #50	; 0x32
 8002b78:	4a91      	ldr	r2, [pc, #580]	; (8002dc0 <UART_SetConfig+0x734>)
 8002b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b7e:	095b      	lsrs	r3, r3, #5
 8002b80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b84:	441e      	add	r6, r3
 8002b86:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f04f 0100 	mov.w	r1, #0
 8002b90:	4602      	mov	r2, r0
 8002b92:	460b      	mov	r3, r1
 8002b94:	1894      	adds	r4, r2, r2
 8002b96:	61bc      	str	r4, [r7, #24]
 8002b98:	415b      	adcs	r3, r3
 8002b9a:	61fb      	str	r3, [r7, #28]
 8002b9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ba0:	1812      	adds	r2, r2, r0
 8002ba2:	eb41 0303 	adc.w	r3, r1, r3
 8002ba6:	f04f 0400 	mov.w	r4, #0
 8002baa:	f04f 0500 	mov.w	r5, #0
 8002bae:	00dd      	lsls	r5, r3, #3
 8002bb0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002bb4:	00d4      	lsls	r4, r2, #3
 8002bb6:	4622      	mov	r2, r4
 8002bb8:	462b      	mov	r3, r5
 8002bba:	1814      	adds	r4, r2, r0
 8002bbc:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8002bc0:	414b      	adcs	r3, r1
 8002bc2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002bc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f04f 0100 	mov.w	r1, #0
 8002bd2:	f04f 0200 	mov.w	r2, #0
 8002bd6:	f04f 0300 	mov.w	r3, #0
 8002bda:	008b      	lsls	r3, r1, #2
 8002bdc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002be0:	0082      	lsls	r2, r0, #2
 8002be2:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8002be6:	f7fd fb53 	bl	8000290 <__aeabi_uldivmod>
 8002bea:	4602      	mov	r2, r0
 8002bec:	460b      	mov	r3, r1
 8002bee:	4b74      	ldr	r3, [pc, #464]	; (8002dc0 <UART_SetConfig+0x734>)
 8002bf0:	fba3 1302 	umull	r1, r3, r3, r2
 8002bf4:	095b      	lsrs	r3, r3, #5
 8002bf6:	2164      	movs	r1, #100	; 0x64
 8002bf8:	fb01 f303 	mul.w	r3, r1, r3
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	011b      	lsls	r3, r3, #4
 8002c00:	3332      	adds	r3, #50	; 0x32
 8002c02:	4a6f      	ldr	r2, [pc, #444]	; (8002dc0 <UART_SetConfig+0x734>)
 8002c04:	fba2 2303 	umull	r2, r3, r2, r3
 8002c08:	095b      	lsrs	r3, r3, #5
 8002c0a:	f003 020f 	and.w	r2, r3, #15
 8002c0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4432      	add	r2, r6
 8002c16:	609a      	str	r2, [r3, #8]
 8002c18:	e0c9      	b.n	8002dae <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002c1a:	f7ff f949 	bl	8001eb0 <HAL_RCC_GetPCLK1Freq>
 8002c1e:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c22:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002c26:	461c      	mov	r4, r3
 8002c28:	f04f 0500 	mov.w	r5, #0
 8002c2c:	4622      	mov	r2, r4
 8002c2e:	462b      	mov	r3, r5
 8002c30:	1891      	adds	r1, r2, r2
 8002c32:	6139      	str	r1, [r7, #16]
 8002c34:	415b      	adcs	r3, r3
 8002c36:	617b      	str	r3, [r7, #20]
 8002c38:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002c3c:	1912      	adds	r2, r2, r4
 8002c3e:	eb45 0303 	adc.w	r3, r5, r3
 8002c42:	f04f 0000 	mov.w	r0, #0
 8002c46:	f04f 0100 	mov.w	r1, #0
 8002c4a:	00d9      	lsls	r1, r3, #3
 8002c4c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002c50:	00d0      	lsls	r0, r2, #3
 8002c52:	4602      	mov	r2, r0
 8002c54:	460b      	mov	r3, r1
 8002c56:	eb12 0804 	adds.w	r8, r2, r4
 8002c5a:	eb43 0905 	adc.w	r9, r3, r5
 8002c5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	4618      	mov	r0, r3
 8002c66:	f04f 0100 	mov.w	r1, #0
 8002c6a:	f04f 0200 	mov.w	r2, #0
 8002c6e:	f04f 0300 	mov.w	r3, #0
 8002c72:	008b      	lsls	r3, r1, #2
 8002c74:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002c78:	0082      	lsls	r2, r0, #2
 8002c7a:	4640      	mov	r0, r8
 8002c7c:	4649      	mov	r1, r9
 8002c7e:	f7fd fb07 	bl	8000290 <__aeabi_uldivmod>
 8002c82:	4602      	mov	r2, r0
 8002c84:	460b      	mov	r3, r1
 8002c86:	4b4e      	ldr	r3, [pc, #312]	; (8002dc0 <UART_SetConfig+0x734>)
 8002c88:	fba3 2302 	umull	r2, r3, r3, r2
 8002c8c:	095b      	lsrs	r3, r3, #5
 8002c8e:	011e      	lsls	r6, r3, #4
 8002c90:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002c94:	4618      	mov	r0, r3
 8002c96:	f04f 0100 	mov.w	r1, #0
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	460b      	mov	r3, r1
 8002c9e:	1894      	adds	r4, r2, r2
 8002ca0:	60bc      	str	r4, [r7, #8]
 8002ca2:	415b      	adcs	r3, r3
 8002ca4:	60fb      	str	r3, [r7, #12]
 8002ca6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002caa:	1812      	adds	r2, r2, r0
 8002cac:	eb41 0303 	adc.w	r3, r1, r3
 8002cb0:	f04f 0400 	mov.w	r4, #0
 8002cb4:	f04f 0500 	mov.w	r5, #0
 8002cb8:	00dd      	lsls	r5, r3, #3
 8002cba:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002cbe:	00d4      	lsls	r4, r2, #3
 8002cc0:	4622      	mov	r2, r4
 8002cc2:	462b      	mov	r3, r5
 8002cc4:	1814      	adds	r4, r2, r0
 8002cc6:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8002cca:	414b      	adcs	r3, r1
 8002ccc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002cd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f04f 0100 	mov.w	r1, #0
 8002cdc:	f04f 0200 	mov.w	r2, #0
 8002ce0:	f04f 0300 	mov.w	r3, #0
 8002ce4:	008b      	lsls	r3, r1, #2
 8002ce6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002cea:	0082      	lsls	r2, r0, #2
 8002cec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002cf0:	f7fd face 	bl	8000290 <__aeabi_uldivmod>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	460b      	mov	r3, r1
 8002cf8:	4b31      	ldr	r3, [pc, #196]	; (8002dc0 <UART_SetConfig+0x734>)
 8002cfa:	fba3 1302 	umull	r1, r3, r3, r2
 8002cfe:	095b      	lsrs	r3, r3, #5
 8002d00:	2164      	movs	r1, #100	; 0x64
 8002d02:	fb01 f303 	mul.w	r3, r1, r3
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	011b      	lsls	r3, r3, #4
 8002d0a:	3332      	adds	r3, #50	; 0x32
 8002d0c:	4a2c      	ldr	r2, [pc, #176]	; (8002dc0 <UART_SetConfig+0x734>)
 8002d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d12:	095b      	lsrs	r3, r3, #5
 8002d14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d18:	441e      	add	r6, r3
 8002d1a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f04f 0100 	mov.w	r1, #0
 8002d24:	4602      	mov	r2, r0
 8002d26:	460b      	mov	r3, r1
 8002d28:	1894      	adds	r4, r2, r2
 8002d2a:	603c      	str	r4, [r7, #0]
 8002d2c:	415b      	adcs	r3, r3
 8002d2e:	607b      	str	r3, [r7, #4]
 8002d30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002d34:	1812      	adds	r2, r2, r0
 8002d36:	eb41 0303 	adc.w	r3, r1, r3
 8002d3a:	f04f 0400 	mov.w	r4, #0
 8002d3e:	f04f 0500 	mov.w	r5, #0
 8002d42:	00dd      	lsls	r5, r3, #3
 8002d44:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002d48:	00d4      	lsls	r4, r2, #3
 8002d4a:	4622      	mov	r2, r4
 8002d4c:	462b      	mov	r3, r5
 8002d4e:	1814      	adds	r4, r2, r0
 8002d50:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8002d54:	414b      	adcs	r3, r1
 8002d56:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002d5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	4618      	mov	r0, r3
 8002d62:	f04f 0100 	mov.w	r1, #0
 8002d66:	f04f 0200 	mov.w	r2, #0
 8002d6a:	f04f 0300 	mov.w	r3, #0
 8002d6e:	008b      	lsls	r3, r1, #2
 8002d70:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002d74:	0082      	lsls	r2, r0, #2
 8002d76:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8002d7a:	f7fd fa89 	bl	8000290 <__aeabi_uldivmod>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	460b      	mov	r3, r1
 8002d82:	4b0f      	ldr	r3, [pc, #60]	; (8002dc0 <UART_SetConfig+0x734>)
 8002d84:	fba3 1302 	umull	r1, r3, r3, r2
 8002d88:	095b      	lsrs	r3, r3, #5
 8002d8a:	2164      	movs	r1, #100	; 0x64
 8002d8c:	fb01 f303 	mul.w	r3, r1, r3
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	011b      	lsls	r3, r3, #4
 8002d94:	3332      	adds	r3, #50	; 0x32
 8002d96:	4a0a      	ldr	r2, [pc, #40]	; (8002dc0 <UART_SetConfig+0x734>)
 8002d98:	fba2 2303 	umull	r2, r3, r2, r3
 8002d9c:	095b      	lsrs	r3, r3, #5
 8002d9e:	f003 020f 	and.w	r2, r3, #15
 8002da2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4432      	add	r2, r6
 8002daa:	609a      	str	r2, [r3, #8]
}
 8002dac:	e7ff      	b.n	8002dae <UART_SetConfig+0x722>
 8002dae:	bf00      	nop
 8002db0:	37f4      	adds	r7, #244	; 0xf4
 8002db2:	46bd      	mov	sp, r7
 8002db4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002db8:	40011000 	.word	0x40011000
 8002dbc:	40011400 	.word	0x40011400
 8002dc0:	51eb851f 	.word	0x51eb851f

08002dc4 <__errno>:
 8002dc4:	4b01      	ldr	r3, [pc, #4]	; (8002dcc <__errno+0x8>)
 8002dc6:	6818      	ldr	r0, [r3, #0]
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	20000014 	.word	0x20000014

08002dd0 <__libc_init_array>:
 8002dd0:	b570      	push	{r4, r5, r6, lr}
 8002dd2:	4d0d      	ldr	r5, [pc, #52]	; (8002e08 <__libc_init_array+0x38>)
 8002dd4:	4c0d      	ldr	r4, [pc, #52]	; (8002e0c <__libc_init_array+0x3c>)
 8002dd6:	1b64      	subs	r4, r4, r5
 8002dd8:	10a4      	asrs	r4, r4, #2
 8002dda:	2600      	movs	r6, #0
 8002ddc:	42a6      	cmp	r6, r4
 8002dde:	d109      	bne.n	8002df4 <__libc_init_array+0x24>
 8002de0:	4d0b      	ldr	r5, [pc, #44]	; (8002e10 <__libc_init_array+0x40>)
 8002de2:	4c0c      	ldr	r4, [pc, #48]	; (8002e14 <__libc_init_array+0x44>)
 8002de4:	f000 fc4e 	bl	8003684 <_init>
 8002de8:	1b64      	subs	r4, r4, r5
 8002dea:	10a4      	asrs	r4, r4, #2
 8002dec:	2600      	movs	r6, #0
 8002dee:	42a6      	cmp	r6, r4
 8002df0:	d105      	bne.n	8002dfe <__libc_init_array+0x2e>
 8002df2:	bd70      	pop	{r4, r5, r6, pc}
 8002df4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002df8:	4798      	blx	r3
 8002dfa:	3601      	adds	r6, #1
 8002dfc:	e7ee      	b.n	8002ddc <__libc_init_array+0xc>
 8002dfe:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e02:	4798      	blx	r3
 8002e04:	3601      	adds	r6, #1
 8002e06:	e7f2      	b.n	8002dee <__libc_init_array+0x1e>
 8002e08:	08003848 	.word	0x08003848
 8002e0c:	08003848 	.word	0x08003848
 8002e10:	08003848 	.word	0x08003848
 8002e14:	0800384c 	.word	0x0800384c

08002e18 <memset>:
 8002e18:	4402      	add	r2, r0
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d100      	bne.n	8002e22 <memset+0xa>
 8002e20:	4770      	bx	lr
 8002e22:	f803 1b01 	strb.w	r1, [r3], #1
 8002e26:	e7f9      	b.n	8002e1c <memset+0x4>

08002e28 <siprintf>:
 8002e28:	b40e      	push	{r1, r2, r3}
 8002e2a:	b500      	push	{lr}
 8002e2c:	b09c      	sub	sp, #112	; 0x70
 8002e2e:	ab1d      	add	r3, sp, #116	; 0x74
 8002e30:	9002      	str	r0, [sp, #8]
 8002e32:	9006      	str	r0, [sp, #24]
 8002e34:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002e38:	4809      	ldr	r0, [pc, #36]	; (8002e60 <siprintf+0x38>)
 8002e3a:	9107      	str	r1, [sp, #28]
 8002e3c:	9104      	str	r1, [sp, #16]
 8002e3e:	4909      	ldr	r1, [pc, #36]	; (8002e64 <siprintf+0x3c>)
 8002e40:	f853 2b04 	ldr.w	r2, [r3], #4
 8002e44:	9105      	str	r1, [sp, #20]
 8002e46:	6800      	ldr	r0, [r0, #0]
 8002e48:	9301      	str	r3, [sp, #4]
 8002e4a:	a902      	add	r1, sp, #8
 8002e4c:	f000 f868 	bl	8002f20 <_svfiprintf_r>
 8002e50:	9b02      	ldr	r3, [sp, #8]
 8002e52:	2200      	movs	r2, #0
 8002e54:	701a      	strb	r2, [r3, #0]
 8002e56:	b01c      	add	sp, #112	; 0x70
 8002e58:	f85d eb04 	ldr.w	lr, [sp], #4
 8002e5c:	b003      	add	sp, #12
 8002e5e:	4770      	bx	lr
 8002e60:	20000014 	.word	0x20000014
 8002e64:	ffff0208 	.word	0xffff0208

08002e68 <__ssputs_r>:
 8002e68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e6c:	688e      	ldr	r6, [r1, #8]
 8002e6e:	429e      	cmp	r6, r3
 8002e70:	4682      	mov	sl, r0
 8002e72:	460c      	mov	r4, r1
 8002e74:	4690      	mov	r8, r2
 8002e76:	461f      	mov	r7, r3
 8002e78:	d838      	bhi.n	8002eec <__ssputs_r+0x84>
 8002e7a:	898a      	ldrh	r2, [r1, #12]
 8002e7c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002e80:	d032      	beq.n	8002ee8 <__ssputs_r+0x80>
 8002e82:	6825      	ldr	r5, [r4, #0]
 8002e84:	6909      	ldr	r1, [r1, #16]
 8002e86:	eba5 0901 	sub.w	r9, r5, r1
 8002e8a:	6965      	ldr	r5, [r4, #20]
 8002e8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002e90:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002e94:	3301      	adds	r3, #1
 8002e96:	444b      	add	r3, r9
 8002e98:	106d      	asrs	r5, r5, #1
 8002e9a:	429d      	cmp	r5, r3
 8002e9c:	bf38      	it	cc
 8002e9e:	461d      	movcc	r5, r3
 8002ea0:	0553      	lsls	r3, r2, #21
 8002ea2:	d531      	bpl.n	8002f08 <__ssputs_r+0xa0>
 8002ea4:	4629      	mov	r1, r5
 8002ea6:	f000 fb47 	bl	8003538 <_malloc_r>
 8002eaa:	4606      	mov	r6, r0
 8002eac:	b950      	cbnz	r0, 8002ec4 <__ssputs_r+0x5c>
 8002eae:	230c      	movs	r3, #12
 8002eb0:	f8ca 3000 	str.w	r3, [sl]
 8002eb4:	89a3      	ldrh	r3, [r4, #12]
 8002eb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002eba:	81a3      	strh	r3, [r4, #12]
 8002ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8002ec0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ec4:	6921      	ldr	r1, [r4, #16]
 8002ec6:	464a      	mov	r2, r9
 8002ec8:	f000 fabe 	bl	8003448 <memcpy>
 8002ecc:	89a3      	ldrh	r3, [r4, #12]
 8002ece:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002ed2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ed6:	81a3      	strh	r3, [r4, #12]
 8002ed8:	6126      	str	r6, [r4, #16]
 8002eda:	6165      	str	r5, [r4, #20]
 8002edc:	444e      	add	r6, r9
 8002ede:	eba5 0509 	sub.w	r5, r5, r9
 8002ee2:	6026      	str	r6, [r4, #0]
 8002ee4:	60a5      	str	r5, [r4, #8]
 8002ee6:	463e      	mov	r6, r7
 8002ee8:	42be      	cmp	r6, r7
 8002eea:	d900      	bls.n	8002eee <__ssputs_r+0x86>
 8002eec:	463e      	mov	r6, r7
 8002eee:	4632      	mov	r2, r6
 8002ef0:	6820      	ldr	r0, [r4, #0]
 8002ef2:	4641      	mov	r1, r8
 8002ef4:	f000 fab6 	bl	8003464 <memmove>
 8002ef8:	68a3      	ldr	r3, [r4, #8]
 8002efa:	6822      	ldr	r2, [r4, #0]
 8002efc:	1b9b      	subs	r3, r3, r6
 8002efe:	4432      	add	r2, r6
 8002f00:	60a3      	str	r3, [r4, #8]
 8002f02:	6022      	str	r2, [r4, #0]
 8002f04:	2000      	movs	r0, #0
 8002f06:	e7db      	b.n	8002ec0 <__ssputs_r+0x58>
 8002f08:	462a      	mov	r2, r5
 8002f0a:	f000 fb6f 	bl	80035ec <_realloc_r>
 8002f0e:	4606      	mov	r6, r0
 8002f10:	2800      	cmp	r0, #0
 8002f12:	d1e1      	bne.n	8002ed8 <__ssputs_r+0x70>
 8002f14:	6921      	ldr	r1, [r4, #16]
 8002f16:	4650      	mov	r0, sl
 8002f18:	f000 fabe 	bl	8003498 <_free_r>
 8002f1c:	e7c7      	b.n	8002eae <__ssputs_r+0x46>
	...

08002f20 <_svfiprintf_r>:
 8002f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f24:	4698      	mov	r8, r3
 8002f26:	898b      	ldrh	r3, [r1, #12]
 8002f28:	061b      	lsls	r3, r3, #24
 8002f2a:	b09d      	sub	sp, #116	; 0x74
 8002f2c:	4607      	mov	r7, r0
 8002f2e:	460d      	mov	r5, r1
 8002f30:	4614      	mov	r4, r2
 8002f32:	d50e      	bpl.n	8002f52 <_svfiprintf_r+0x32>
 8002f34:	690b      	ldr	r3, [r1, #16]
 8002f36:	b963      	cbnz	r3, 8002f52 <_svfiprintf_r+0x32>
 8002f38:	2140      	movs	r1, #64	; 0x40
 8002f3a:	f000 fafd 	bl	8003538 <_malloc_r>
 8002f3e:	6028      	str	r0, [r5, #0]
 8002f40:	6128      	str	r0, [r5, #16]
 8002f42:	b920      	cbnz	r0, 8002f4e <_svfiprintf_r+0x2e>
 8002f44:	230c      	movs	r3, #12
 8002f46:	603b      	str	r3, [r7, #0]
 8002f48:	f04f 30ff 	mov.w	r0, #4294967295
 8002f4c:	e0d1      	b.n	80030f2 <_svfiprintf_r+0x1d2>
 8002f4e:	2340      	movs	r3, #64	; 0x40
 8002f50:	616b      	str	r3, [r5, #20]
 8002f52:	2300      	movs	r3, #0
 8002f54:	9309      	str	r3, [sp, #36]	; 0x24
 8002f56:	2320      	movs	r3, #32
 8002f58:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002f5c:	f8cd 800c 	str.w	r8, [sp, #12]
 8002f60:	2330      	movs	r3, #48	; 0x30
 8002f62:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800310c <_svfiprintf_r+0x1ec>
 8002f66:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002f6a:	f04f 0901 	mov.w	r9, #1
 8002f6e:	4623      	mov	r3, r4
 8002f70:	469a      	mov	sl, r3
 8002f72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002f76:	b10a      	cbz	r2, 8002f7c <_svfiprintf_r+0x5c>
 8002f78:	2a25      	cmp	r2, #37	; 0x25
 8002f7a:	d1f9      	bne.n	8002f70 <_svfiprintf_r+0x50>
 8002f7c:	ebba 0b04 	subs.w	fp, sl, r4
 8002f80:	d00b      	beq.n	8002f9a <_svfiprintf_r+0x7a>
 8002f82:	465b      	mov	r3, fp
 8002f84:	4622      	mov	r2, r4
 8002f86:	4629      	mov	r1, r5
 8002f88:	4638      	mov	r0, r7
 8002f8a:	f7ff ff6d 	bl	8002e68 <__ssputs_r>
 8002f8e:	3001      	adds	r0, #1
 8002f90:	f000 80aa 	beq.w	80030e8 <_svfiprintf_r+0x1c8>
 8002f94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002f96:	445a      	add	r2, fp
 8002f98:	9209      	str	r2, [sp, #36]	; 0x24
 8002f9a:	f89a 3000 	ldrb.w	r3, [sl]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	f000 80a2 	beq.w	80030e8 <_svfiprintf_r+0x1c8>
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	f04f 32ff 	mov.w	r2, #4294967295
 8002faa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002fae:	f10a 0a01 	add.w	sl, sl, #1
 8002fb2:	9304      	str	r3, [sp, #16]
 8002fb4:	9307      	str	r3, [sp, #28]
 8002fb6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002fba:	931a      	str	r3, [sp, #104]	; 0x68
 8002fbc:	4654      	mov	r4, sl
 8002fbe:	2205      	movs	r2, #5
 8002fc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002fc4:	4851      	ldr	r0, [pc, #324]	; (800310c <_svfiprintf_r+0x1ec>)
 8002fc6:	f7fd f913 	bl	80001f0 <memchr>
 8002fca:	9a04      	ldr	r2, [sp, #16]
 8002fcc:	b9d8      	cbnz	r0, 8003006 <_svfiprintf_r+0xe6>
 8002fce:	06d0      	lsls	r0, r2, #27
 8002fd0:	bf44      	itt	mi
 8002fd2:	2320      	movmi	r3, #32
 8002fd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002fd8:	0711      	lsls	r1, r2, #28
 8002fda:	bf44      	itt	mi
 8002fdc:	232b      	movmi	r3, #43	; 0x2b
 8002fde:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002fe2:	f89a 3000 	ldrb.w	r3, [sl]
 8002fe6:	2b2a      	cmp	r3, #42	; 0x2a
 8002fe8:	d015      	beq.n	8003016 <_svfiprintf_r+0xf6>
 8002fea:	9a07      	ldr	r2, [sp, #28]
 8002fec:	4654      	mov	r4, sl
 8002fee:	2000      	movs	r0, #0
 8002ff0:	f04f 0c0a 	mov.w	ip, #10
 8002ff4:	4621      	mov	r1, r4
 8002ff6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002ffa:	3b30      	subs	r3, #48	; 0x30
 8002ffc:	2b09      	cmp	r3, #9
 8002ffe:	d94e      	bls.n	800309e <_svfiprintf_r+0x17e>
 8003000:	b1b0      	cbz	r0, 8003030 <_svfiprintf_r+0x110>
 8003002:	9207      	str	r2, [sp, #28]
 8003004:	e014      	b.n	8003030 <_svfiprintf_r+0x110>
 8003006:	eba0 0308 	sub.w	r3, r0, r8
 800300a:	fa09 f303 	lsl.w	r3, r9, r3
 800300e:	4313      	orrs	r3, r2
 8003010:	9304      	str	r3, [sp, #16]
 8003012:	46a2      	mov	sl, r4
 8003014:	e7d2      	b.n	8002fbc <_svfiprintf_r+0x9c>
 8003016:	9b03      	ldr	r3, [sp, #12]
 8003018:	1d19      	adds	r1, r3, #4
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	9103      	str	r1, [sp, #12]
 800301e:	2b00      	cmp	r3, #0
 8003020:	bfbb      	ittet	lt
 8003022:	425b      	neglt	r3, r3
 8003024:	f042 0202 	orrlt.w	r2, r2, #2
 8003028:	9307      	strge	r3, [sp, #28]
 800302a:	9307      	strlt	r3, [sp, #28]
 800302c:	bfb8      	it	lt
 800302e:	9204      	strlt	r2, [sp, #16]
 8003030:	7823      	ldrb	r3, [r4, #0]
 8003032:	2b2e      	cmp	r3, #46	; 0x2e
 8003034:	d10c      	bne.n	8003050 <_svfiprintf_r+0x130>
 8003036:	7863      	ldrb	r3, [r4, #1]
 8003038:	2b2a      	cmp	r3, #42	; 0x2a
 800303a:	d135      	bne.n	80030a8 <_svfiprintf_r+0x188>
 800303c:	9b03      	ldr	r3, [sp, #12]
 800303e:	1d1a      	adds	r2, r3, #4
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	9203      	str	r2, [sp, #12]
 8003044:	2b00      	cmp	r3, #0
 8003046:	bfb8      	it	lt
 8003048:	f04f 33ff 	movlt.w	r3, #4294967295
 800304c:	3402      	adds	r4, #2
 800304e:	9305      	str	r3, [sp, #20]
 8003050:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800311c <_svfiprintf_r+0x1fc>
 8003054:	7821      	ldrb	r1, [r4, #0]
 8003056:	2203      	movs	r2, #3
 8003058:	4650      	mov	r0, sl
 800305a:	f7fd f8c9 	bl	80001f0 <memchr>
 800305e:	b140      	cbz	r0, 8003072 <_svfiprintf_r+0x152>
 8003060:	2340      	movs	r3, #64	; 0x40
 8003062:	eba0 000a 	sub.w	r0, r0, sl
 8003066:	fa03 f000 	lsl.w	r0, r3, r0
 800306a:	9b04      	ldr	r3, [sp, #16]
 800306c:	4303      	orrs	r3, r0
 800306e:	3401      	adds	r4, #1
 8003070:	9304      	str	r3, [sp, #16]
 8003072:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003076:	4826      	ldr	r0, [pc, #152]	; (8003110 <_svfiprintf_r+0x1f0>)
 8003078:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800307c:	2206      	movs	r2, #6
 800307e:	f7fd f8b7 	bl	80001f0 <memchr>
 8003082:	2800      	cmp	r0, #0
 8003084:	d038      	beq.n	80030f8 <_svfiprintf_r+0x1d8>
 8003086:	4b23      	ldr	r3, [pc, #140]	; (8003114 <_svfiprintf_r+0x1f4>)
 8003088:	bb1b      	cbnz	r3, 80030d2 <_svfiprintf_r+0x1b2>
 800308a:	9b03      	ldr	r3, [sp, #12]
 800308c:	3307      	adds	r3, #7
 800308e:	f023 0307 	bic.w	r3, r3, #7
 8003092:	3308      	adds	r3, #8
 8003094:	9303      	str	r3, [sp, #12]
 8003096:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003098:	4433      	add	r3, r6
 800309a:	9309      	str	r3, [sp, #36]	; 0x24
 800309c:	e767      	b.n	8002f6e <_svfiprintf_r+0x4e>
 800309e:	fb0c 3202 	mla	r2, ip, r2, r3
 80030a2:	460c      	mov	r4, r1
 80030a4:	2001      	movs	r0, #1
 80030a6:	e7a5      	b.n	8002ff4 <_svfiprintf_r+0xd4>
 80030a8:	2300      	movs	r3, #0
 80030aa:	3401      	adds	r4, #1
 80030ac:	9305      	str	r3, [sp, #20]
 80030ae:	4619      	mov	r1, r3
 80030b0:	f04f 0c0a 	mov.w	ip, #10
 80030b4:	4620      	mov	r0, r4
 80030b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80030ba:	3a30      	subs	r2, #48	; 0x30
 80030bc:	2a09      	cmp	r2, #9
 80030be:	d903      	bls.n	80030c8 <_svfiprintf_r+0x1a8>
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d0c5      	beq.n	8003050 <_svfiprintf_r+0x130>
 80030c4:	9105      	str	r1, [sp, #20]
 80030c6:	e7c3      	b.n	8003050 <_svfiprintf_r+0x130>
 80030c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80030cc:	4604      	mov	r4, r0
 80030ce:	2301      	movs	r3, #1
 80030d0:	e7f0      	b.n	80030b4 <_svfiprintf_r+0x194>
 80030d2:	ab03      	add	r3, sp, #12
 80030d4:	9300      	str	r3, [sp, #0]
 80030d6:	462a      	mov	r2, r5
 80030d8:	4b0f      	ldr	r3, [pc, #60]	; (8003118 <_svfiprintf_r+0x1f8>)
 80030da:	a904      	add	r1, sp, #16
 80030dc:	4638      	mov	r0, r7
 80030de:	f3af 8000 	nop.w
 80030e2:	1c42      	adds	r2, r0, #1
 80030e4:	4606      	mov	r6, r0
 80030e6:	d1d6      	bne.n	8003096 <_svfiprintf_r+0x176>
 80030e8:	89ab      	ldrh	r3, [r5, #12]
 80030ea:	065b      	lsls	r3, r3, #25
 80030ec:	f53f af2c 	bmi.w	8002f48 <_svfiprintf_r+0x28>
 80030f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80030f2:	b01d      	add	sp, #116	; 0x74
 80030f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80030f8:	ab03      	add	r3, sp, #12
 80030fa:	9300      	str	r3, [sp, #0]
 80030fc:	462a      	mov	r2, r5
 80030fe:	4b06      	ldr	r3, [pc, #24]	; (8003118 <_svfiprintf_r+0x1f8>)
 8003100:	a904      	add	r1, sp, #16
 8003102:	4638      	mov	r0, r7
 8003104:	f000 f87a 	bl	80031fc <_printf_i>
 8003108:	e7eb      	b.n	80030e2 <_svfiprintf_r+0x1c2>
 800310a:	bf00      	nop
 800310c:	0800380c 	.word	0x0800380c
 8003110:	08003816 	.word	0x08003816
 8003114:	00000000 	.word	0x00000000
 8003118:	08002e69 	.word	0x08002e69
 800311c:	08003812 	.word	0x08003812

08003120 <_printf_common>:
 8003120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003124:	4616      	mov	r6, r2
 8003126:	4699      	mov	r9, r3
 8003128:	688a      	ldr	r2, [r1, #8]
 800312a:	690b      	ldr	r3, [r1, #16]
 800312c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003130:	4293      	cmp	r3, r2
 8003132:	bfb8      	it	lt
 8003134:	4613      	movlt	r3, r2
 8003136:	6033      	str	r3, [r6, #0]
 8003138:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800313c:	4607      	mov	r7, r0
 800313e:	460c      	mov	r4, r1
 8003140:	b10a      	cbz	r2, 8003146 <_printf_common+0x26>
 8003142:	3301      	adds	r3, #1
 8003144:	6033      	str	r3, [r6, #0]
 8003146:	6823      	ldr	r3, [r4, #0]
 8003148:	0699      	lsls	r1, r3, #26
 800314a:	bf42      	ittt	mi
 800314c:	6833      	ldrmi	r3, [r6, #0]
 800314e:	3302      	addmi	r3, #2
 8003150:	6033      	strmi	r3, [r6, #0]
 8003152:	6825      	ldr	r5, [r4, #0]
 8003154:	f015 0506 	ands.w	r5, r5, #6
 8003158:	d106      	bne.n	8003168 <_printf_common+0x48>
 800315a:	f104 0a19 	add.w	sl, r4, #25
 800315e:	68e3      	ldr	r3, [r4, #12]
 8003160:	6832      	ldr	r2, [r6, #0]
 8003162:	1a9b      	subs	r3, r3, r2
 8003164:	42ab      	cmp	r3, r5
 8003166:	dc26      	bgt.n	80031b6 <_printf_common+0x96>
 8003168:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800316c:	1e13      	subs	r3, r2, #0
 800316e:	6822      	ldr	r2, [r4, #0]
 8003170:	bf18      	it	ne
 8003172:	2301      	movne	r3, #1
 8003174:	0692      	lsls	r2, r2, #26
 8003176:	d42b      	bmi.n	80031d0 <_printf_common+0xb0>
 8003178:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800317c:	4649      	mov	r1, r9
 800317e:	4638      	mov	r0, r7
 8003180:	47c0      	blx	r8
 8003182:	3001      	adds	r0, #1
 8003184:	d01e      	beq.n	80031c4 <_printf_common+0xa4>
 8003186:	6823      	ldr	r3, [r4, #0]
 8003188:	68e5      	ldr	r5, [r4, #12]
 800318a:	6832      	ldr	r2, [r6, #0]
 800318c:	f003 0306 	and.w	r3, r3, #6
 8003190:	2b04      	cmp	r3, #4
 8003192:	bf08      	it	eq
 8003194:	1aad      	subeq	r5, r5, r2
 8003196:	68a3      	ldr	r3, [r4, #8]
 8003198:	6922      	ldr	r2, [r4, #16]
 800319a:	bf0c      	ite	eq
 800319c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80031a0:	2500      	movne	r5, #0
 80031a2:	4293      	cmp	r3, r2
 80031a4:	bfc4      	itt	gt
 80031a6:	1a9b      	subgt	r3, r3, r2
 80031a8:	18ed      	addgt	r5, r5, r3
 80031aa:	2600      	movs	r6, #0
 80031ac:	341a      	adds	r4, #26
 80031ae:	42b5      	cmp	r5, r6
 80031b0:	d11a      	bne.n	80031e8 <_printf_common+0xc8>
 80031b2:	2000      	movs	r0, #0
 80031b4:	e008      	b.n	80031c8 <_printf_common+0xa8>
 80031b6:	2301      	movs	r3, #1
 80031b8:	4652      	mov	r2, sl
 80031ba:	4649      	mov	r1, r9
 80031bc:	4638      	mov	r0, r7
 80031be:	47c0      	blx	r8
 80031c0:	3001      	adds	r0, #1
 80031c2:	d103      	bne.n	80031cc <_printf_common+0xac>
 80031c4:	f04f 30ff 	mov.w	r0, #4294967295
 80031c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031cc:	3501      	adds	r5, #1
 80031ce:	e7c6      	b.n	800315e <_printf_common+0x3e>
 80031d0:	18e1      	adds	r1, r4, r3
 80031d2:	1c5a      	adds	r2, r3, #1
 80031d4:	2030      	movs	r0, #48	; 0x30
 80031d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80031da:	4422      	add	r2, r4
 80031dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80031e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80031e4:	3302      	adds	r3, #2
 80031e6:	e7c7      	b.n	8003178 <_printf_common+0x58>
 80031e8:	2301      	movs	r3, #1
 80031ea:	4622      	mov	r2, r4
 80031ec:	4649      	mov	r1, r9
 80031ee:	4638      	mov	r0, r7
 80031f0:	47c0      	blx	r8
 80031f2:	3001      	adds	r0, #1
 80031f4:	d0e6      	beq.n	80031c4 <_printf_common+0xa4>
 80031f6:	3601      	adds	r6, #1
 80031f8:	e7d9      	b.n	80031ae <_printf_common+0x8e>
	...

080031fc <_printf_i>:
 80031fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003200:	460c      	mov	r4, r1
 8003202:	4691      	mov	r9, r2
 8003204:	7e27      	ldrb	r7, [r4, #24]
 8003206:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003208:	2f78      	cmp	r7, #120	; 0x78
 800320a:	4680      	mov	r8, r0
 800320c:	469a      	mov	sl, r3
 800320e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003212:	d807      	bhi.n	8003224 <_printf_i+0x28>
 8003214:	2f62      	cmp	r7, #98	; 0x62
 8003216:	d80a      	bhi.n	800322e <_printf_i+0x32>
 8003218:	2f00      	cmp	r7, #0
 800321a:	f000 80d8 	beq.w	80033ce <_printf_i+0x1d2>
 800321e:	2f58      	cmp	r7, #88	; 0x58
 8003220:	f000 80a3 	beq.w	800336a <_printf_i+0x16e>
 8003224:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003228:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800322c:	e03a      	b.n	80032a4 <_printf_i+0xa8>
 800322e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003232:	2b15      	cmp	r3, #21
 8003234:	d8f6      	bhi.n	8003224 <_printf_i+0x28>
 8003236:	a001      	add	r0, pc, #4	; (adr r0, 800323c <_printf_i+0x40>)
 8003238:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800323c:	08003295 	.word	0x08003295
 8003240:	080032a9 	.word	0x080032a9
 8003244:	08003225 	.word	0x08003225
 8003248:	08003225 	.word	0x08003225
 800324c:	08003225 	.word	0x08003225
 8003250:	08003225 	.word	0x08003225
 8003254:	080032a9 	.word	0x080032a9
 8003258:	08003225 	.word	0x08003225
 800325c:	08003225 	.word	0x08003225
 8003260:	08003225 	.word	0x08003225
 8003264:	08003225 	.word	0x08003225
 8003268:	080033b5 	.word	0x080033b5
 800326c:	080032d9 	.word	0x080032d9
 8003270:	08003397 	.word	0x08003397
 8003274:	08003225 	.word	0x08003225
 8003278:	08003225 	.word	0x08003225
 800327c:	080033d7 	.word	0x080033d7
 8003280:	08003225 	.word	0x08003225
 8003284:	080032d9 	.word	0x080032d9
 8003288:	08003225 	.word	0x08003225
 800328c:	08003225 	.word	0x08003225
 8003290:	0800339f 	.word	0x0800339f
 8003294:	680b      	ldr	r3, [r1, #0]
 8003296:	1d1a      	adds	r2, r3, #4
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	600a      	str	r2, [r1, #0]
 800329c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80032a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80032a4:	2301      	movs	r3, #1
 80032a6:	e0a3      	b.n	80033f0 <_printf_i+0x1f4>
 80032a8:	6825      	ldr	r5, [r4, #0]
 80032aa:	6808      	ldr	r0, [r1, #0]
 80032ac:	062e      	lsls	r6, r5, #24
 80032ae:	f100 0304 	add.w	r3, r0, #4
 80032b2:	d50a      	bpl.n	80032ca <_printf_i+0xce>
 80032b4:	6805      	ldr	r5, [r0, #0]
 80032b6:	600b      	str	r3, [r1, #0]
 80032b8:	2d00      	cmp	r5, #0
 80032ba:	da03      	bge.n	80032c4 <_printf_i+0xc8>
 80032bc:	232d      	movs	r3, #45	; 0x2d
 80032be:	426d      	negs	r5, r5
 80032c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80032c4:	485e      	ldr	r0, [pc, #376]	; (8003440 <_printf_i+0x244>)
 80032c6:	230a      	movs	r3, #10
 80032c8:	e019      	b.n	80032fe <_printf_i+0x102>
 80032ca:	f015 0f40 	tst.w	r5, #64	; 0x40
 80032ce:	6805      	ldr	r5, [r0, #0]
 80032d0:	600b      	str	r3, [r1, #0]
 80032d2:	bf18      	it	ne
 80032d4:	b22d      	sxthne	r5, r5
 80032d6:	e7ef      	b.n	80032b8 <_printf_i+0xbc>
 80032d8:	680b      	ldr	r3, [r1, #0]
 80032da:	6825      	ldr	r5, [r4, #0]
 80032dc:	1d18      	adds	r0, r3, #4
 80032de:	6008      	str	r0, [r1, #0]
 80032e0:	0628      	lsls	r0, r5, #24
 80032e2:	d501      	bpl.n	80032e8 <_printf_i+0xec>
 80032e4:	681d      	ldr	r5, [r3, #0]
 80032e6:	e002      	b.n	80032ee <_printf_i+0xf2>
 80032e8:	0669      	lsls	r1, r5, #25
 80032ea:	d5fb      	bpl.n	80032e4 <_printf_i+0xe8>
 80032ec:	881d      	ldrh	r5, [r3, #0]
 80032ee:	4854      	ldr	r0, [pc, #336]	; (8003440 <_printf_i+0x244>)
 80032f0:	2f6f      	cmp	r7, #111	; 0x6f
 80032f2:	bf0c      	ite	eq
 80032f4:	2308      	moveq	r3, #8
 80032f6:	230a      	movne	r3, #10
 80032f8:	2100      	movs	r1, #0
 80032fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80032fe:	6866      	ldr	r6, [r4, #4]
 8003300:	60a6      	str	r6, [r4, #8]
 8003302:	2e00      	cmp	r6, #0
 8003304:	bfa2      	ittt	ge
 8003306:	6821      	ldrge	r1, [r4, #0]
 8003308:	f021 0104 	bicge.w	r1, r1, #4
 800330c:	6021      	strge	r1, [r4, #0]
 800330e:	b90d      	cbnz	r5, 8003314 <_printf_i+0x118>
 8003310:	2e00      	cmp	r6, #0
 8003312:	d04d      	beq.n	80033b0 <_printf_i+0x1b4>
 8003314:	4616      	mov	r6, r2
 8003316:	fbb5 f1f3 	udiv	r1, r5, r3
 800331a:	fb03 5711 	mls	r7, r3, r1, r5
 800331e:	5dc7      	ldrb	r7, [r0, r7]
 8003320:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003324:	462f      	mov	r7, r5
 8003326:	42bb      	cmp	r3, r7
 8003328:	460d      	mov	r5, r1
 800332a:	d9f4      	bls.n	8003316 <_printf_i+0x11a>
 800332c:	2b08      	cmp	r3, #8
 800332e:	d10b      	bne.n	8003348 <_printf_i+0x14c>
 8003330:	6823      	ldr	r3, [r4, #0]
 8003332:	07df      	lsls	r7, r3, #31
 8003334:	d508      	bpl.n	8003348 <_printf_i+0x14c>
 8003336:	6923      	ldr	r3, [r4, #16]
 8003338:	6861      	ldr	r1, [r4, #4]
 800333a:	4299      	cmp	r1, r3
 800333c:	bfde      	ittt	le
 800333e:	2330      	movle	r3, #48	; 0x30
 8003340:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003344:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003348:	1b92      	subs	r2, r2, r6
 800334a:	6122      	str	r2, [r4, #16]
 800334c:	f8cd a000 	str.w	sl, [sp]
 8003350:	464b      	mov	r3, r9
 8003352:	aa03      	add	r2, sp, #12
 8003354:	4621      	mov	r1, r4
 8003356:	4640      	mov	r0, r8
 8003358:	f7ff fee2 	bl	8003120 <_printf_common>
 800335c:	3001      	adds	r0, #1
 800335e:	d14c      	bne.n	80033fa <_printf_i+0x1fe>
 8003360:	f04f 30ff 	mov.w	r0, #4294967295
 8003364:	b004      	add	sp, #16
 8003366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800336a:	4835      	ldr	r0, [pc, #212]	; (8003440 <_printf_i+0x244>)
 800336c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003370:	6823      	ldr	r3, [r4, #0]
 8003372:	680e      	ldr	r6, [r1, #0]
 8003374:	061f      	lsls	r7, r3, #24
 8003376:	f856 5b04 	ldr.w	r5, [r6], #4
 800337a:	600e      	str	r6, [r1, #0]
 800337c:	d514      	bpl.n	80033a8 <_printf_i+0x1ac>
 800337e:	07d9      	lsls	r1, r3, #31
 8003380:	bf44      	itt	mi
 8003382:	f043 0320 	orrmi.w	r3, r3, #32
 8003386:	6023      	strmi	r3, [r4, #0]
 8003388:	b91d      	cbnz	r5, 8003392 <_printf_i+0x196>
 800338a:	6823      	ldr	r3, [r4, #0]
 800338c:	f023 0320 	bic.w	r3, r3, #32
 8003390:	6023      	str	r3, [r4, #0]
 8003392:	2310      	movs	r3, #16
 8003394:	e7b0      	b.n	80032f8 <_printf_i+0xfc>
 8003396:	6823      	ldr	r3, [r4, #0]
 8003398:	f043 0320 	orr.w	r3, r3, #32
 800339c:	6023      	str	r3, [r4, #0]
 800339e:	2378      	movs	r3, #120	; 0x78
 80033a0:	4828      	ldr	r0, [pc, #160]	; (8003444 <_printf_i+0x248>)
 80033a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80033a6:	e7e3      	b.n	8003370 <_printf_i+0x174>
 80033a8:	065e      	lsls	r6, r3, #25
 80033aa:	bf48      	it	mi
 80033ac:	b2ad      	uxthmi	r5, r5
 80033ae:	e7e6      	b.n	800337e <_printf_i+0x182>
 80033b0:	4616      	mov	r6, r2
 80033b2:	e7bb      	b.n	800332c <_printf_i+0x130>
 80033b4:	680b      	ldr	r3, [r1, #0]
 80033b6:	6826      	ldr	r6, [r4, #0]
 80033b8:	6960      	ldr	r0, [r4, #20]
 80033ba:	1d1d      	adds	r5, r3, #4
 80033bc:	600d      	str	r5, [r1, #0]
 80033be:	0635      	lsls	r5, r6, #24
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	d501      	bpl.n	80033c8 <_printf_i+0x1cc>
 80033c4:	6018      	str	r0, [r3, #0]
 80033c6:	e002      	b.n	80033ce <_printf_i+0x1d2>
 80033c8:	0671      	lsls	r1, r6, #25
 80033ca:	d5fb      	bpl.n	80033c4 <_printf_i+0x1c8>
 80033cc:	8018      	strh	r0, [r3, #0]
 80033ce:	2300      	movs	r3, #0
 80033d0:	6123      	str	r3, [r4, #16]
 80033d2:	4616      	mov	r6, r2
 80033d4:	e7ba      	b.n	800334c <_printf_i+0x150>
 80033d6:	680b      	ldr	r3, [r1, #0]
 80033d8:	1d1a      	adds	r2, r3, #4
 80033da:	600a      	str	r2, [r1, #0]
 80033dc:	681e      	ldr	r6, [r3, #0]
 80033de:	6862      	ldr	r2, [r4, #4]
 80033e0:	2100      	movs	r1, #0
 80033e2:	4630      	mov	r0, r6
 80033e4:	f7fc ff04 	bl	80001f0 <memchr>
 80033e8:	b108      	cbz	r0, 80033ee <_printf_i+0x1f2>
 80033ea:	1b80      	subs	r0, r0, r6
 80033ec:	6060      	str	r0, [r4, #4]
 80033ee:	6863      	ldr	r3, [r4, #4]
 80033f0:	6123      	str	r3, [r4, #16]
 80033f2:	2300      	movs	r3, #0
 80033f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80033f8:	e7a8      	b.n	800334c <_printf_i+0x150>
 80033fa:	6923      	ldr	r3, [r4, #16]
 80033fc:	4632      	mov	r2, r6
 80033fe:	4649      	mov	r1, r9
 8003400:	4640      	mov	r0, r8
 8003402:	47d0      	blx	sl
 8003404:	3001      	adds	r0, #1
 8003406:	d0ab      	beq.n	8003360 <_printf_i+0x164>
 8003408:	6823      	ldr	r3, [r4, #0]
 800340a:	079b      	lsls	r3, r3, #30
 800340c:	d413      	bmi.n	8003436 <_printf_i+0x23a>
 800340e:	68e0      	ldr	r0, [r4, #12]
 8003410:	9b03      	ldr	r3, [sp, #12]
 8003412:	4298      	cmp	r0, r3
 8003414:	bfb8      	it	lt
 8003416:	4618      	movlt	r0, r3
 8003418:	e7a4      	b.n	8003364 <_printf_i+0x168>
 800341a:	2301      	movs	r3, #1
 800341c:	4632      	mov	r2, r6
 800341e:	4649      	mov	r1, r9
 8003420:	4640      	mov	r0, r8
 8003422:	47d0      	blx	sl
 8003424:	3001      	adds	r0, #1
 8003426:	d09b      	beq.n	8003360 <_printf_i+0x164>
 8003428:	3501      	adds	r5, #1
 800342a:	68e3      	ldr	r3, [r4, #12]
 800342c:	9903      	ldr	r1, [sp, #12]
 800342e:	1a5b      	subs	r3, r3, r1
 8003430:	42ab      	cmp	r3, r5
 8003432:	dcf2      	bgt.n	800341a <_printf_i+0x21e>
 8003434:	e7eb      	b.n	800340e <_printf_i+0x212>
 8003436:	2500      	movs	r5, #0
 8003438:	f104 0619 	add.w	r6, r4, #25
 800343c:	e7f5      	b.n	800342a <_printf_i+0x22e>
 800343e:	bf00      	nop
 8003440:	0800381d 	.word	0x0800381d
 8003444:	0800382e 	.word	0x0800382e

08003448 <memcpy>:
 8003448:	440a      	add	r2, r1
 800344a:	4291      	cmp	r1, r2
 800344c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003450:	d100      	bne.n	8003454 <memcpy+0xc>
 8003452:	4770      	bx	lr
 8003454:	b510      	push	{r4, lr}
 8003456:	f811 4b01 	ldrb.w	r4, [r1], #1
 800345a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800345e:	4291      	cmp	r1, r2
 8003460:	d1f9      	bne.n	8003456 <memcpy+0xe>
 8003462:	bd10      	pop	{r4, pc}

08003464 <memmove>:
 8003464:	4288      	cmp	r0, r1
 8003466:	b510      	push	{r4, lr}
 8003468:	eb01 0402 	add.w	r4, r1, r2
 800346c:	d902      	bls.n	8003474 <memmove+0x10>
 800346e:	4284      	cmp	r4, r0
 8003470:	4623      	mov	r3, r4
 8003472:	d807      	bhi.n	8003484 <memmove+0x20>
 8003474:	1e43      	subs	r3, r0, #1
 8003476:	42a1      	cmp	r1, r4
 8003478:	d008      	beq.n	800348c <memmove+0x28>
 800347a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800347e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003482:	e7f8      	b.n	8003476 <memmove+0x12>
 8003484:	4402      	add	r2, r0
 8003486:	4601      	mov	r1, r0
 8003488:	428a      	cmp	r2, r1
 800348a:	d100      	bne.n	800348e <memmove+0x2a>
 800348c:	bd10      	pop	{r4, pc}
 800348e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003492:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003496:	e7f7      	b.n	8003488 <memmove+0x24>

08003498 <_free_r>:
 8003498:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800349a:	2900      	cmp	r1, #0
 800349c:	d048      	beq.n	8003530 <_free_r+0x98>
 800349e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80034a2:	9001      	str	r0, [sp, #4]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	f1a1 0404 	sub.w	r4, r1, #4
 80034aa:	bfb8      	it	lt
 80034ac:	18e4      	addlt	r4, r4, r3
 80034ae:	f000 f8d3 	bl	8003658 <__malloc_lock>
 80034b2:	4a20      	ldr	r2, [pc, #128]	; (8003534 <_free_r+0x9c>)
 80034b4:	9801      	ldr	r0, [sp, #4]
 80034b6:	6813      	ldr	r3, [r2, #0]
 80034b8:	4615      	mov	r5, r2
 80034ba:	b933      	cbnz	r3, 80034ca <_free_r+0x32>
 80034bc:	6063      	str	r3, [r4, #4]
 80034be:	6014      	str	r4, [r2, #0]
 80034c0:	b003      	add	sp, #12
 80034c2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80034c6:	f000 b8cd 	b.w	8003664 <__malloc_unlock>
 80034ca:	42a3      	cmp	r3, r4
 80034cc:	d90b      	bls.n	80034e6 <_free_r+0x4e>
 80034ce:	6821      	ldr	r1, [r4, #0]
 80034d0:	1862      	adds	r2, r4, r1
 80034d2:	4293      	cmp	r3, r2
 80034d4:	bf04      	itt	eq
 80034d6:	681a      	ldreq	r2, [r3, #0]
 80034d8:	685b      	ldreq	r3, [r3, #4]
 80034da:	6063      	str	r3, [r4, #4]
 80034dc:	bf04      	itt	eq
 80034de:	1852      	addeq	r2, r2, r1
 80034e0:	6022      	streq	r2, [r4, #0]
 80034e2:	602c      	str	r4, [r5, #0]
 80034e4:	e7ec      	b.n	80034c0 <_free_r+0x28>
 80034e6:	461a      	mov	r2, r3
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	b10b      	cbz	r3, 80034f0 <_free_r+0x58>
 80034ec:	42a3      	cmp	r3, r4
 80034ee:	d9fa      	bls.n	80034e6 <_free_r+0x4e>
 80034f0:	6811      	ldr	r1, [r2, #0]
 80034f2:	1855      	adds	r5, r2, r1
 80034f4:	42a5      	cmp	r5, r4
 80034f6:	d10b      	bne.n	8003510 <_free_r+0x78>
 80034f8:	6824      	ldr	r4, [r4, #0]
 80034fa:	4421      	add	r1, r4
 80034fc:	1854      	adds	r4, r2, r1
 80034fe:	42a3      	cmp	r3, r4
 8003500:	6011      	str	r1, [r2, #0]
 8003502:	d1dd      	bne.n	80034c0 <_free_r+0x28>
 8003504:	681c      	ldr	r4, [r3, #0]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	6053      	str	r3, [r2, #4]
 800350a:	4421      	add	r1, r4
 800350c:	6011      	str	r1, [r2, #0]
 800350e:	e7d7      	b.n	80034c0 <_free_r+0x28>
 8003510:	d902      	bls.n	8003518 <_free_r+0x80>
 8003512:	230c      	movs	r3, #12
 8003514:	6003      	str	r3, [r0, #0]
 8003516:	e7d3      	b.n	80034c0 <_free_r+0x28>
 8003518:	6825      	ldr	r5, [r4, #0]
 800351a:	1961      	adds	r1, r4, r5
 800351c:	428b      	cmp	r3, r1
 800351e:	bf04      	itt	eq
 8003520:	6819      	ldreq	r1, [r3, #0]
 8003522:	685b      	ldreq	r3, [r3, #4]
 8003524:	6063      	str	r3, [r4, #4]
 8003526:	bf04      	itt	eq
 8003528:	1949      	addeq	r1, r1, r5
 800352a:	6021      	streq	r1, [r4, #0]
 800352c:	6054      	str	r4, [r2, #4]
 800352e:	e7c7      	b.n	80034c0 <_free_r+0x28>
 8003530:	b003      	add	sp, #12
 8003532:	bd30      	pop	{r4, r5, pc}
 8003534:	200000e8 	.word	0x200000e8

08003538 <_malloc_r>:
 8003538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800353a:	1ccd      	adds	r5, r1, #3
 800353c:	f025 0503 	bic.w	r5, r5, #3
 8003540:	3508      	adds	r5, #8
 8003542:	2d0c      	cmp	r5, #12
 8003544:	bf38      	it	cc
 8003546:	250c      	movcc	r5, #12
 8003548:	2d00      	cmp	r5, #0
 800354a:	4606      	mov	r6, r0
 800354c:	db01      	blt.n	8003552 <_malloc_r+0x1a>
 800354e:	42a9      	cmp	r1, r5
 8003550:	d903      	bls.n	800355a <_malloc_r+0x22>
 8003552:	230c      	movs	r3, #12
 8003554:	6033      	str	r3, [r6, #0]
 8003556:	2000      	movs	r0, #0
 8003558:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800355a:	f000 f87d 	bl	8003658 <__malloc_lock>
 800355e:	4921      	ldr	r1, [pc, #132]	; (80035e4 <_malloc_r+0xac>)
 8003560:	680a      	ldr	r2, [r1, #0]
 8003562:	4614      	mov	r4, r2
 8003564:	b99c      	cbnz	r4, 800358e <_malloc_r+0x56>
 8003566:	4f20      	ldr	r7, [pc, #128]	; (80035e8 <_malloc_r+0xb0>)
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	b923      	cbnz	r3, 8003576 <_malloc_r+0x3e>
 800356c:	4621      	mov	r1, r4
 800356e:	4630      	mov	r0, r6
 8003570:	f000 f862 	bl	8003638 <_sbrk_r>
 8003574:	6038      	str	r0, [r7, #0]
 8003576:	4629      	mov	r1, r5
 8003578:	4630      	mov	r0, r6
 800357a:	f000 f85d 	bl	8003638 <_sbrk_r>
 800357e:	1c43      	adds	r3, r0, #1
 8003580:	d123      	bne.n	80035ca <_malloc_r+0x92>
 8003582:	230c      	movs	r3, #12
 8003584:	6033      	str	r3, [r6, #0]
 8003586:	4630      	mov	r0, r6
 8003588:	f000 f86c 	bl	8003664 <__malloc_unlock>
 800358c:	e7e3      	b.n	8003556 <_malloc_r+0x1e>
 800358e:	6823      	ldr	r3, [r4, #0]
 8003590:	1b5b      	subs	r3, r3, r5
 8003592:	d417      	bmi.n	80035c4 <_malloc_r+0x8c>
 8003594:	2b0b      	cmp	r3, #11
 8003596:	d903      	bls.n	80035a0 <_malloc_r+0x68>
 8003598:	6023      	str	r3, [r4, #0]
 800359a:	441c      	add	r4, r3
 800359c:	6025      	str	r5, [r4, #0]
 800359e:	e004      	b.n	80035aa <_malloc_r+0x72>
 80035a0:	6863      	ldr	r3, [r4, #4]
 80035a2:	42a2      	cmp	r2, r4
 80035a4:	bf0c      	ite	eq
 80035a6:	600b      	streq	r3, [r1, #0]
 80035a8:	6053      	strne	r3, [r2, #4]
 80035aa:	4630      	mov	r0, r6
 80035ac:	f000 f85a 	bl	8003664 <__malloc_unlock>
 80035b0:	f104 000b 	add.w	r0, r4, #11
 80035b4:	1d23      	adds	r3, r4, #4
 80035b6:	f020 0007 	bic.w	r0, r0, #7
 80035ba:	1ac2      	subs	r2, r0, r3
 80035bc:	d0cc      	beq.n	8003558 <_malloc_r+0x20>
 80035be:	1a1b      	subs	r3, r3, r0
 80035c0:	50a3      	str	r3, [r4, r2]
 80035c2:	e7c9      	b.n	8003558 <_malloc_r+0x20>
 80035c4:	4622      	mov	r2, r4
 80035c6:	6864      	ldr	r4, [r4, #4]
 80035c8:	e7cc      	b.n	8003564 <_malloc_r+0x2c>
 80035ca:	1cc4      	adds	r4, r0, #3
 80035cc:	f024 0403 	bic.w	r4, r4, #3
 80035d0:	42a0      	cmp	r0, r4
 80035d2:	d0e3      	beq.n	800359c <_malloc_r+0x64>
 80035d4:	1a21      	subs	r1, r4, r0
 80035d6:	4630      	mov	r0, r6
 80035d8:	f000 f82e 	bl	8003638 <_sbrk_r>
 80035dc:	3001      	adds	r0, #1
 80035de:	d1dd      	bne.n	800359c <_malloc_r+0x64>
 80035e0:	e7cf      	b.n	8003582 <_malloc_r+0x4a>
 80035e2:	bf00      	nop
 80035e4:	200000e8 	.word	0x200000e8
 80035e8:	200000ec 	.word	0x200000ec

080035ec <_realloc_r>:
 80035ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035ee:	4607      	mov	r7, r0
 80035f0:	4614      	mov	r4, r2
 80035f2:	460e      	mov	r6, r1
 80035f4:	b921      	cbnz	r1, 8003600 <_realloc_r+0x14>
 80035f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80035fa:	4611      	mov	r1, r2
 80035fc:	f7ff bf9c 	b.w	8003538 <_malloc_r>
 8003600:	b922      	cbnz	r2, 800360c <_realloc_r+0x20>
 8003602:	f7ff ff49 	bl	8003498 <_free_r>
 8003606:	4625      	mov	r5, r4
 8003608:	4628      	mov	r0, r5
 800360a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800360c:	f000 f830 	bl	8003670 <_malloc_usable_size_r>
 8003610:	42a0      	cmp	r0, r4
 8003612:	d20f      	bcs.n	8003634 <_realloc_r+0x48>
 8003614:	4621      	mov	r1, r4
 8003616:	4638      	mov	r0, r7
 8003618:	f7ff ff8e 	bl	8003538 <_malloc_r>
 800361c:	4605      	mov	r5, r0
 800361e:	2800      	cmp	r0, #0
 8003620:	d0f2      	beq.n	8003608 <_realloc_r+0x1c>
 8003622:	4631      	mov	r1, r6
 8003624:	4622      	mov	r2, r4
 8003626:	f7ff ff0f 	bl	8003448 <memcpy>
 800362a:	4631      	mov	r1, r6
 800362c:	4638      	mov	r0, r7
 800362e:	f7ff ff33 	bl	8003498 <_free_r>
 8003632:	e7e9      	b.n	8003608 <_realloc_r+0x1c>
 8003634:	4635      	mov	r5, r6
 8003636:	e7e7      	b.n	8003608 <_realloc_r+0x1c>

08003638 <_sbrk_r>:
 8003638:	b538      	push	{r3, r4, r5, lr}
 800363a:	4d06      	ldr	r5, [pc, #24]	; (8003654 <_sbrk_r+0x1c>)
 800363c:	2300      	movs	r3, #0
 800363e:	4604      	mov	r4, r0
 8003640:	4608      	mov	r0, r1
 8003642:	602b      	str	r3, [r5, #0]
 8003644:	f7fd fc04 	bl	8000e50 <_sbrk>
 8003648:	1c43      	adds	r3, r0, #1
 800364a:	d102      	bne.n	8003652 <_sbrk_r+0x1a>
 800364c:	682b      	ldr	r3, [r5, #0]
 800364e:	b103      	cbz	r3, 8003652 <_sbrk_r+0x1a>
 8003650:	6023      	str	r3, [r4, #0]
 8003652:	bd38      	pop	{r3, r4, r5, pc}
 8003654:	20000134 	.word	0x20000134

08003658 <__malloc_lock>:
 8003658:	4801      	ldr	r0, [pc, #4]	; (8003660 <__malloc_lock+0x8>)
 800365a:	f000 b811 	b.w	8003680 <__retarget_lock_acquire_recursive>
 800365e:	bf00      	nop
 8003660:	2000013c 	.word	0x2000013c

08003664 <__malloc_unlock>:
 8003664:	4801      	ldr	r0, [pc, #4]	; (800366c <__malloc_unlock+0x8>)
 8003666:	f000 b80c 	b.w	8003682 <__retarget_lock_release_recursive>
 800366a:	bf00      	nop
 800366c:	2000013c 	.word	0x2000013c

08003670 <_malloc_usable_size_r>:
 8003670:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003674:	1f18      	subs	r0, r3, #4
 8003676:	2b00      	cmp	r3, #0
 8003678:	bfbc      	itt	lt
 800367a:	580b      	ldrlt	r3, [r1, r0]
 800367c:	18c0      	addlt	r0, r0, r3
 800367e:	4770      	bx	lr

08003680 <__retarget_lock_acquire_recursive>:
 8003680:	4770      	bx	lr

08003682 <__retarget_lock_release_recursive>:
 8003682:	4770      	bx	lr

08003684 <_init>:
 8003684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003686:	bf00      	nop
 8003688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800368a:	bc08      	pop	{r3}
 800368c:	469e      	mov	lr, r3
 800368e:	4770      	bx	lr

08003690 <_fini>:
 8003690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003692:	bf00      	nop
 8003694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003696:	bc08      	pop	{r3}
 8003698:	469e      	mov	lr, r3
 800369a:	4770      	bx	lr
